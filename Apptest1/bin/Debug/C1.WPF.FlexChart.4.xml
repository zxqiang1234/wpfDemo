<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.WPF.FlexChart.4</name>
  </assembly>
  <members>
    <member name="T:C1.Chart.AnimationTransformEventArgs">
      <summary>
            Specifies arguments for AnimationTransform event.
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationTransformEventArgs.State">
      <summary>
            Gets the animation state.
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationTransformEventArgs.AxisType">
      <summary>
            Gets the axis type.
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationTransformEventArgs.End">
      <summary>
            Gets the ending position.
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationTransformEventArgs.Position">
      <summary>
            Gets the animation position (from 0.0 to 1.0).
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationTransformEventArgs.Series">
      <summary>
            Gets the current series.
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationTransformEventArgs.PointIndex">
      <summary>
            Get the current point index.
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationTransformEventArgs.Start">
      <summary>
            Gets the startig position.
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationTransformEventArgs.Cancel">
      <summary>
            Whether to cancel the default animation.
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationTransformEventArgs.Value">
      <summary>
            Gets or sets the value in data coordinates.
            </summary>
    </member>
    <member name="T:C1.Chart.AnimationType">
      <summary>
            Specifies animation type.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationType.All">
      <summary>
            All series are animated at the same time.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationType.Series">
      <summary>
            Series by series animation.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationType.Points">
      <summary>
            Point by point animation.
            </summary>
    </member>
    <member name="T:C1.Chart.AnimationDirection">
      <summary>
            Specifies animation direction.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationDirection.X">
      <summary>
            X (horizontal) direction.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationDirection.Y">
      <summary>
            Y (vertical) direction.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationDirection.XY">
      <summary>
            Both (X and Y) directions. 
            </summary>
    </member>
    <member name="T:C1.Chart.SliceAttribute">
      <summary>
            Specifies slice attribute for FlexPie animation.
            </summary>
    </member>
    <member name="F:C1.Chart.SliceAttribute.None">
      <summary>
            No attributes (animation is disabled).
            </summary>
    </member>
    <member name="F:C1.Chart.SliceAttribute.Radius">
      <summary>
            Radius or pie slice.
            </summary>
    </member>
    <member name="F:C1.Chart.SliceAttribute.Sweep">
      <summary>
            Sweep of  pie slice.
            </summary>
    </member>
    <member name="F:C1.Chart.SliceAttribute.Angle">
      <summary>
            Angle of pie slice.
            </summary>
    </member>
    <member name="T:C1.Chart.AnimationState">
      <summary>
            Specifies animation state.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationState.Load">
      <summary>
            Animation when loading data.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationState.Update">
      <summary>
            Animation when updating data.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationState.Delete">
      <summary>
            Animation when deleting data series.
            </summary>
    </member>
    <member name="T:C1.Chart.AnimationSettings">
      <summary>
            Animation settings.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationSettings.None">
      <summary>
            Animation disabled.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationSettings.Load">
      <summary>
            Shows animation during loading data.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationSettings.Update">
      <summary>
            Shows animation during updating data.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationSettings.AxesLoad">
      <summary>
            Animate axes during loading data.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationSettings.AxesUpdate">
      <summary>
            Animate axes during updating data.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationSettings.Axes">
      <summary>
            Animate axes during loading or updating data.
            </summary>
    </member>
    <member name="F:C1.Chart.AnimationSettings.All">
      <summary>
            Show all animations.
            </summary>
    </member>
    <member name="T:C1.Chart.AnimationOptions">
      <summary>
            Stores animation options.
            </summary>
    </member>
    <member name="E:C1.Chart.AnimationOptions.PropertyChanged">
      <summary>
            Fires when property value was changed.
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationOptions.FPS">
      <summary>
            Gets or sets animation FPS (frame per second).
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationOptions.Duration">
      <summary>
            Gets or sets the animation duration.
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationOptions.Easing">
      <summary>
            Gets or sets the animation easing.
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationOptions.Type">
      <summary>
            Gets or sets the animation type.
            </summary>
    </member>
    <member name="M:C1.Chart.AnimationOptions.OnPropertyChanged(System.String)">
      <summary>
            Called when property was changed.
            </summary>
      <param name="propertyName">Property name.</param>
    </member>
    <member name="T:C1.Chart.AnimationLoadOptions">
      <summary>
            Stores load animation option 
            </summary>
    </member>
    <member name="P:C1.Chart.AnimationLoadOptions.Direction">
      <summary>
            Gets or sets the animation direction.
            </summary>
    </member>
    <member name="T:C1.Chart.PieAnimationOptions">
      <summary>
            Stores animation options for FlexPie control.
            </summary>
    </member>
    <member name="P:C1.Chart.PieAnimationOptions.Attributes">
      <summary>
            Gets or sets the slice attributes for animation.
            </summary>
    </member>
    <member name="T:C1.Chart.Easing">
      <summary>
            Specifies easing function.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.AnnotationAttachment">
      <summary>
            Specifies the attachment of the annotation.
            </summary>
    </member>
    <member name="F:C1.Chart.Annotation.AnnotationAttachment.DataIndex">
      <summary>
            Coordinates of the annotation point are defined by the data series index and 
            the data point index.
            </summary>
    </member>
    <member name="F:C1.Chart.Annotation.AnnotationAttachment.DataCoordinate">
      <summary>
            Annotation point is specified in data coordinates.
            </summary>
    </member>
    <member name="F:C1.Chart.Annotation.AnnotationAttachment.Relative">
      <summary>
            Annotation point is specified as a relative position inside the control where
            (0,0) is the top left corner and (1,1) is the bottom right corner.
            </summary>
    </member>
    <member name="F:C1.Chart.Annotation.AnnotationAttachment.Absolute">
      <summary>
            The annotation point is specified in control's pixel coordinates.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.AnnotationPosition">
      <summary>
            Specifies the position of the annotation.
            </summary>
    </member>
    <member name="F:C1.Chart.Annotation.AnnotationPosition.Center">
      <summary>
            The annotation appears at the Center of the target point.
            </summary>
    </member>
    <member name="F:C1.Chart.Annotation.AnnotationPosition.Top">
      <summary>
            The annotation appears at the Top of the target point.
            </summary>
    </member>
    <member name="F:C1.Chart.Annotation.AnnotationPosition.Bottom">
      <summary>
            The annotation appears at the Bottom of the target point.
            </summary>
    </member>
    <member name="F:C1.Chart.Annotation.AnnotationPosition.Left">
      <summary>
            The annotation appears at the Left of the target point.
            </summary>
    </member>
    <member name="F:C1.Chart.Annotation.AnnotationPosition.Right">
      <summary>
            The annotation appears at the Right of the target point.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.IAnnotationBase">
      <summary>
            IBaseAnnotation interface.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IAnnotationBase.Attachment">
      <summary>
            Gets or sets the attachment of the annotation.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IAnnotationBase.Position">
      <summary>
            Gets or sets the position of annotation.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IAnnotationBase.Location">
      <summary>
            Gets or sets the location of annotation.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IAnnotationBase.PointIndex">
      <summary>
            Gets or sets the data point index of the annotation.
            Applies only when the <see cref="P:C1.Chart.Annotation.IAnnotationBase.Attachment" /> property is set to DataIndex.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IAnnotationBase.SeriesIndex">
      <summary>
            Gets or sets the data series index of the annotation.
            Applies only when the <see cref="P:C1.Chart.Annotation.IAnnotationBase.Attachment" /> is set to DataIndex.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IAnnotationBase.TooltipText">
      <summary>
            Gets or sets the tooltip of the annotation.
            </summary>
    </member>
    <member name="M:C1.Chart.Annotation.IAnnotationBase.GetSize">
      <summary>
            Gets the size of the annotation.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Chart.Annotation.IAnnotationBase.Bounds">
      <summary>
            Gets the bounding box in pixel coordinates.
            </summary>
    </member>
    <member name="M:C1.Chart.Annotation.IAnnotationBase.Distance(System.Double,System.Double)">
      <summary>
            Returns distance from annotation to the specifies point.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart.Annotation.IAnnotationLayer">
      <summary>
            Annotation layer interface.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IAnnotationLayer.Annotations">
      <summary>
            Gets the annotation collection.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.ICircle">
      <summary>
            ICircle interface.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.ICircle.Radius">
      <summary>
            Gets or sets the radius of circle annotation.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.IEllipse">
      <summary>
            IEllipse interface.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IEllipse.Width">
      <summary>
            Gets or sets the width of ellipse annotation.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IEllipse.Height">
      <summary>
            Gets or sets the height of ellipse annotation.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.IImage">
      <summary>
            IImage interface.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IImage.SourceImage">
      <summary>
            Gets or sets the source of image annotation.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IImage.Width">
      <summary>
            Gets or sets the width of image annotation.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IImage.Height">
      <summary>
            Gets or sets the height of image annotation.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.ILine">
      <summary>
            ILine interface.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.ILine.Start">
      <summary>
            Gets or sets the start point of line annotation.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.ILine.End">
      <summary>
            Gets or sets the end point of line annotation.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.IPolygon">
      <summary>
            IPolygon interface.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IPolygon.Points">
      <summary>
            Gets the collection of points of the polygon annotation.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IPolygon.ContentCenter">
      <summary>
            Gets or sets a location where the center of the content should be.
            If this is null as its default value, will automatically locate the content.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.IRectangle">
      <summary>
            IRectangle interface.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IRectangle.Width">
      <summary>
            Gets or sets the width of rectangle annotation.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IRectangle.Height">
      <summary>
            Gets or sets the height of rectangle annotation.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.IShape">
      <summary>
            IShape interface.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IShape.Content">
      <summary>
            Gets or sets the text of shape annotation.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.ISquare">
      <summary>
            ISquare interface.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.ISquare.Length">
      <summary>
            Gets or sets the length of the square annotation.
            </summary>
    </member>
    <member name="T:C1.Chart.Annotation.IText">
      <summary>
            IText interface.
            </summary>
    </member>
    <member name="P:C1.Chart.Annotation.IText.Content">
      <summary>
            Gets or sets the text of the annotation.
            </summary>
    </member>
    <member name="T:C1.Chart.DateTimeGroupProvider">
      <summary>
            Provides basic groups for DateTime values that extend beyond one month.  Although
            default groups are provided, explicit selection of the groups and format are possible.
            </summary>
    </member>
    <member name="M:C1.Chart.DateTimeGroupProvider.#ctor">
      <summary>
            This contstructor allows automatic generation of groups based upon the axis range.
            </summary>
    </member>
    <member name="M:C1.Chart.DateTimeGroupProvider.#ctor(C1.Chart.IAxis)">
      <summary>
            This constructor allows automatic generation of groups based upon the axis range
            and the axis MajorUnit value.
            </summary>
      <param name="axis">
      </param>
    </member>
    <member name="M:C1.Chart.DateTimeGroupProvider.GetLevels(C1.Chart.IRange)">
      <summary>
            As the first method called by FlexChart, this method provides the number of group
            levels provided by the class.
            </summary>
      <param name="range">
            Specifies the full range of the axis data.
            </param>
      <returns>Specifies number of group levels.</returns>
    </member>
    <member name="P:C1.Chart.DateTimeGroupProvider.GroupTypes">
      <summary>
            Gets the collection of group specifiers using the TimeUnits enumeration.  The index of each
            specifier indicates (level-1).  Specifiers modified using the collection Add, Insert and Remove
            methods of the collection.  If no values are specified, values are automatically selected
            based on the range.
            </summary>
    </member>
    <member name="P:C1.Chart.DateTimeGroupProvider.GroupFormats">
      <summary>
            Get a dictionary of formats keyed by the TimeUnits enum of each group.  Each value specifies
            the string.Format() of the numeric value followed by the year, with the exception of TimeUnits.Month
            for which the format specifies either all "M" characters (for the month name) or the numeric
            value of the month and year. Note if {1} is not included in the format, the year is not included.
            
            Default formats are Day="{0}", Week="Week {0}, Month="MMM", Quarter="Q{0}", "Year="{0}".
            </summary>
    </member>
    <member name="M:C1.Chart.DateTimeGroupProvider.GetRanges(C1.Chart.IRange,System.Int32)">
      <summary>
            Returns a list of IRange values for the level specified the by the appropriate
            entry in the GroupTypes collection.
            </summary>
      <param name="range">
            Specifies the full range of the axis.
            </param>
      <param name="level">
            Specifies the level of IRange values for the level specified by the appropriate
            entry in the GroupTypes collection.
            </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart.BaseRenderEventArgs">
      <summary>
            Base render event arguments.
            </summary>
    </member>
    <member name="P:C1.Chart.BaseRenderEventArgs.Engine">
      <summary>
            Gets the rendering engine.
            </summary>
    </member>
    <member name="T:C1.Chart.IDataLabel">
      <summary>
            IDataLabel interface.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.Content">
      <summary>
            Gets or sets the label content.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.Position">
      <summary>
            Gets or sets the label position.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.Border">
      <summary>
            Gets or sets a value indicating whether data labels have border.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.ConnectingLine">
      <summary>
            Gets or sets a value indicating whether data labels have connecting lines.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.Offset">
      <summary>
            Gets or sets the offset of data label.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.Overlapping">
      <summary>
            Gets or sets overlapping.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.OverlappingOptions">
      <summary>
            Gets or sets overlapping options.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.ContentOptions">
      <summary>
            Gets or sets content options.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.Angle">
      <summary>
            Gets or sets the rotation angle.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.MaxWidth">
      <summary>
            Gets or sets the maximum width.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.MaxLines">
      <summary>
            Gets or sets the maximum number or lines.
            </summary>
    </member>
    <member name="P:C1.Chart.IDataLabel.MaxAutoLabels">
      <summary>
            Gets or sets the maximum number of automatic labels.
            </summary>
    </member>
    <member name="T:C1.Chart.IPieDataLabel">
      <summary>
            IPieDataLabel interface.
            </summary>
    </member>
    <member name="P:C1.Chart.IPieDataLabel.Content">
      <summary>
            Gets or sets the label content.
            </summary>
    </member>
    <member name="P:C1.Chart.IPieDataLabel.Position">
      <summary>
            Gets or sets the label position.
            </summary>
    </member>
    <member name="P:C1.Chart.IPieDataLabel.Border">
      <summary>
            Gets or sets a value indicating whether data labels have border.
            </summary>
    </member>
    <member name="P:C1.Chart.IPieDataLabel.ConnectingLine">
      <summary>
            Gets or sets a value indicating whether data labels have connecting lines.
            </summary>
    </member>
    <member name="P:C1.Chart.IPieDataLabel.Offset">
      <summary>
            Gets or sets the offset of data label.
            </summary>
    </member>
    <member name="T:C1.Chart.ChartType">
      <summary>
            Specifies the chart type.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.Column">
      <summary>
            Shows vertical bars.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.Bar">
      <summary>
            Shows horizontal bars.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.Line">
      <summary>
            Shows trends over a period of time or across categories.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.Scatter">
      <summary>
            Shows patterns within the data using X and Y coordinates.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.LineSymbols">
      <summary>
            Shows line chart with a symbol on each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.Area">
      <summary>
            Shows line chart with the area below the line filled with color.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.Spline">
      <summary>
            Displays line chart that plots curves rather than angled lines through the data points.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.SplineSymbols">
      <summary>
            Displays spline chart with symbols on each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.SplineArea">
      <summary>
            Displays spline chart with the area below the line filled with color.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.Bubble">
      <summary>
            Shows Scatter chart with a third data value that determines the size of the symbol.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.Candlestick">
      <summary>
            Presents items with high, low, open, and close values.
            The size of the wick line is determined by the High and Low values, 
            while the size of the bar is determined by the Open and Close values. 
            The bar is displayed using different colors, depending on 
            whether the close value is higher or lower than the open value.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.HighLowOpenClose">
      <summary>
            Displays the same information as a candlestick chart, except that opening 
            values are displayed using lines to the left, while lines to the right
            indicate closing values.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.Funnel">
      <summary>
            Displays funnel chart.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.Histogram">
      <summary>
            Displays histogram chart.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.RangedHistogram">
      <summary>
            Displays a ranged histogram chart.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.Step">
      <summary>
            Step chart.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.StepSymbols">
      <summary>
            Step chart with symbols.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartType.StepArea">
      <summary>
            Step area chart.
            </summary>
    </member>
    <member name="T:C1.Chart.Stacking">
      <summary>
            Specifies whether and how to stack the chart's data values.
            </summary>
    </member>
    <member name="F:C1.Chart.Stacking.None">
      <summary>
            No stacking. Each series object is plotted independently.
            </summary>
    </member>
    <member name="F:C1.Chart.Stacking.Stacked">
      <summary>
            Stacked charts show how each value contributes to the total.
            </summary>
    </member>
    <member name="F:C1.Chart.Stacking.Stacked100pc">
      <summary>
            100% stacked charts show how each value contributes to the total with the relative size of
            each series representing its contribution to the total.
            </summary>
    </member>
    <member name="T:C1.Chart.SeriesVisibility">
      <summary>
            Specifies whether and where the Series is visible.
            </summary>
    </member>
    <member name="F:C1.Chart.SeriesVisibility.Visible">
      <summary>
            The series is visible on the plot and in the legend.
            </summary>
    </member>
    <member name="F:C1.Chart.SeriesVisibility.Plot">
      <summary>
            The series is visible only on the plot.
            </summary>
    </member>
    <member name="F:C1.Chart.SeriesVisibility.Legend">
      <summary>
            The series is visible only in the legend.
            </summary>
    </member>
    <member name="F:C1.Chart.SeriesVisibility.Hidden">
      <summary>
            The series is hidden.
            </summary>
    </member>
    <member name="T:C1.Chart.DataType">
      <summary>
            Specifies chart data type
            </summary>
    </member>
    <member name="F:C1.Chart.DataType.Number">
      <summary>
            Numeric data.
            </summary>
    </member>
    <member name="F:C1.Chart.DataType.Date">
      <summary>
            Date or time data.
            </summary>
    </member>
    <member name="T:C1.Chart.ChartElement">
      <summary>
            Specifies chart element that may be found by the HitTest method.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartElement.PlotArea">
      <summary>
            The area within the axes.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartElement.AxisX">
      <summary>
            X-axis.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartElement.AxisY">
      <summary>
            Y-axis.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartElement.ChartArea">
      <summary>
            The area within the control but outside the axes.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartElement.Legend">
      <summary>
            The chart legend.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartElement.Header">
      <summary>
            The chart header.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartElement.Footer">
      <summary>
            The chart footer.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartElement.Series">
      <summary>
            A chart series.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartElement.SeriesSymbol">
      <summary>
            A chart series symbol.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartElement.DataLabel">
      <summary>
            A data label.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartElement.None">
      <summary>
            No chart element.
            </summary>
    </member>
    <member name="T:C1.Chart.LabelPosition">
      <summary>
            Specifies chart data label position.
            </summary>
    </member>
    <member name="F:C1.Chart.LabelPosition.None">
      <summary>
            No data labels appear.
            </summary>
    </member>
    <member name="F:C1.Chart.LabelPosition.Left">
      <summary>
            The labels appear to the left of the data points.
            </summary>
    </member>
    <member name="F:C1.Chart.LabelPosition.Top">
      <summary>
            The labels appear above the data points.
            </summary>
    </member>
    <member name="F:C1.Chart.LabelPosition.Right">
      <summary>
            The labels appear to the right of the data points.
            </summary>
    </member>
    <member name="F:C1.Chart.LabelPosition.Bottom">
      <summary>
            The labels appear below the data points.
            </summary>
    </member>
    <member name="F:C1.Chart.LabelPosition.Center">
      <summary>
            The labels appear centered on the data points.
            </summary>
    </member>
    <member name="F:C1.Chart.LabelPosition.Auto">
      <summary>
            Automatic label postion. 
            </summary>
    </member>
    <member name="T:C1.Chart.PieLabelPosition">
      <summary>
            Specifies the position of data labels on the pie chart.
            </summary>
    </member>
    <member name="F:C1.Chart.PieLabelPosition.None">
      <summary>
            No data labels.
            </summary>
    </member>
    <member name="F:C1.Chart.PieLabelPosition.Inside">
      <summary>
            The label appears inside the pie slice.
            </summary>
    </member>
    <member name="F:C1.Chart.PieLabelPosition.Center">
      <summary>
            The item appears at the center of the pie slice.
            </summary>
    </member>
    <member name="F:C1.Chart.PieLabelPosition.Outside">
      <summary>
            The item appears outside the pie slice.
            </summary>
    </member>
    <member name="F:C1.Chart.PieLabelPosition.Radial">
      <summary>
            The item appears inside the pie slice and depends of its angle.
            </summary>
    </member>
    <member name="F:C1.Chart.PieLabelPosition.Circular">
      <summary>
            The item appears inside the pie slice and has circular direction.
            </summary>
    </member>
    <member name="F:C1.Chart.PieLabelPosition.Auto">
      <summary>
            Automatic label position.
            </summary>
    </member>
    <member name="T:C1.Chart.PieLabelOverlapping">
      <summary>
            Specifies how to handle pie data labels that are outside the corresponding pie segment.
            </summary>
    </member>
    <member name="F:C1.Chart.PieLabelOverlapping.Default">
      <summary>
            Show overlapped labels. 
            </summary>
    </member>
    <member name="F:C1.Chart.PieLabelOverlapping.Trim">
      <summary>
            Trim label content if its width is larger than the corresponding pie segment.
            </summary>
    </member>
    <member name="F:C1.Chart.PieLabelOverlapping.Hide">
      <summary>
            Hide label if its content is larger than the corresponding pie segment.
            </summary>
    </member>
    <member name="T:C1.Chart.LabelOverlapping">
      <summary>
            Specifies how to handle overlapped labels.
            </summary>
    </member>
    <member name="F:C1.Chart.LabelOverlapping.Hide">
      <summary>
            Hide overlapped labels.
            </summary>
    </member>
    <member name="F:C1.Chart.LabelOverlapping.Show">
      <summary>
            Show overlapped labels.
            </summary>
    </member>
    <member name="T:C1.Chart.ContentOptions">
      <summary>
            Specifies content options.
            </summary>
    </member>
    <member name="F:C1.Chart.ContentOptions.None">
      <summary>
            All content is shown.
            </summary>
    </member>
    <member name="F:C1.Chart.ContentOptions.Trim">
      <summary>
            Trim content if its width is large than MaxWidth property.
            </summary>
    </member>
    <member name="F:C1.Chart.ContentOptions.WordWrap">
      <summary>
            Wrap content if its width is large than MaxWidth property.
            </summary>
    </member>
    <member name="T:C1.Chart.LabelOverlappingOptions">
      <summary>
            Specifies label overlapping options.
            </summary>
    </member>
    <member name="F:C1.Chart.LabelOverlappingOptions.None">
      <summary>
            No overlapping allowed.
            </summary>
    </member>
    <member name="F:C1.Chart.LabelOverlappingOptions.OverlapDataPoints">
      <summary>
            Allow overlapping with data points
            </summary>
    </member>
    <member name="F:C1.Chart.LabelOverlappingOptions.OutsidePlotArea">
      <summary>
            Allow labels outside plot area.
            </summary>
    </member>
    <member name="T:C1.Chart.ChartSelectionMode">
      <summary>
            Available selection modes.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartSelectionMode.None">
      <summary>
            Selection is disabled.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartSelectionMode.Series">
      <summary>
            Series selection.
            </summary>
    </member>
    <member name="F:C1.Chart.ChartSelectionMode.Point">
      <summary>
            Point selection.
            </summary>
    </member>
    <member name="T:C1.Chart.ElementSizeType">
      <summary>
            Specifies the size type for ElementSize object.
            </summary>
    </member>
    <member name="F:C1.Chart.ElementSizeType.Percentage">
      <summary>
            Size specified in perecents from available space.
            </summary>
    </member>
    <member name="F:C1.Chart.ElementSizeType.Absolute">
      <summary>
            Size specified in pixels.
            </summary>
    </member>
    <member name="T:C1.Chart.SymbolMarker">
      <summary>
            Specifies the type of marker to use for the SymbolMarker property.
            Applies to Scatter, LineSymbols, and SplineSymbols chart types.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.Dot">
      <summary>
            Uses a solid circle to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.Box">
      <summary>
            Uses a square to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.Circle">
      <summary>
            Uses a circle to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.Cross">
      <summary>
            Uses a crossed horizontal and vertical to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.DiagCross">
      <summary>
            Uses a diagonal cross to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.Diamond">
      <summary>
            Uses a solid diamond to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.HorizontalLine">
      <summary>
            Uses a short horizontal line to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.InvertedTri">
      <summary>
            Uses a solid inverted triangle to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.OpenDiamond">
      <summary>
            Uses a outline of a diamond to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.OpenInvertedTri">
      <summary>
            Uses a outline of an inverted triangle to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.OpenTri">
      <summary>
            Uses a outline of a triangle to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.Square">
      <summary>
            Uses a outline of a square to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.Star">
      <summary>
            Uses a solid star to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.Tri">
      <summary>
            Uses a solid triangle to mark each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.SymbolMarker.VerticalLine">
      <summary>
            Uses a short vertical line to mark each data point.
            </summary>
    </member>
    <member name="T:C1.Chart.ElementSize">
      <summary>
            Represents element size.
            </summary>
    </member>
    <member name="P:C1.Chart.ElementSize.SizeType">
      <summary>
            Gets or sets the size type.
            </summary>
    </member>
    <member name="P:C1.Chart.ElementSize.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="M:C1.Chart.ElementSize.op_Equality(C1.Chart.ElementSize,C1.Chart.ElementSize)">
      <summary>
      </summary>
      <param name="size1">
      </param>
      <param name="size2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.ElementSize.op_Inequality(C1.Chart.ElementSize,C1.Chart.ElementSize)">
      <summary>
      </summary>
      <param name="size1">
      </param>
      <param name="size2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.ElementSize.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.ElementSize.GetHashCode">
      <summary>
            Returns hash code of the instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart.OverlappingLabels">
      <summary>
            Specifies how to handle overlapping labels.
            </summary>
    </member>
    <member name="F:C1.Chart.OverlappingLabels.Auto">
      <summary>
            Hide overlapping labels.
            </summary>
    </member>
    <member name="F:C1.Chart.OverlappingLabels.Show">
      <summary>
            Show all labels, including overlapping ones.
            </summary>
    </member>
    <member name="F:C1.Chart.OverlappingLabels.Trim">
      <summary>
            Trim label if it's larger than avalable width.
            </summary>
    </member>
    <member name="F:C1.Chart.OverlappingLabels.WordWrap">
      <summary>
            Wrap label if it's larger than avalable width.
            </summary>
    </member>
    <member name="T:C1.Chart.MeasureOption">
      <summary>
            Specifies measuring direction.
            </summary>
    </member>
    <member name="F:C1.Chart.MeasureOption.X">
      <summary>
            By X-axis.
            </summary>
    </member>
    <member name="F:C1.Chart.MeasureOption.Y">
      <summary>
            By Y-axis.
            </summary>
    </member>
    <member name="F:C1.Chart.MeasureOption.XY">
      <summary>
            Both X- and Y- axes.
            </summary>
    </member>
    <member name="T:C1.Chart.FitType">
      <summary>
            Specifies fit type for trend line.
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.Linear">
      <summary>
            Regression fit to the equation Y(x) = C0 + C1*x.
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.Polynom">
      <summary>
            Regression fit to the equation Y(x) = C0 + C1*x + C2*x2 + : + Cn-1*xn-1, where n - number of terms.
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.Exponent">
      <summary>
            Regression fit to the equation Y(x) = C0 * exp( C1*x)
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.Logarithmic">
      <summary>
            Regression fit to the equation Y(x) = C0 * ln(C1*x)
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.Power">
      <summary>
            Regression fit to the equation Y(x) = C0 * pow(x, C1)
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.Fourier">
      <summary>
            Regression fit to the equation Y(x) = C0 + C1 * cos(x) + C2 * sin(x) + C3 * cos(2*x) + C4 * sin(2*x) + ...
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.MinX">
      <summary>
            Minimal X-value.
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.MinY">
      <summary>
            Minimal Y-value.
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.MaxX">
      <summary>
            Maximum X-value.
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.MaxY">
      <summary>
            Maximum Y-value.
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.AverageX">
      <summary>
            Average X-value.
            </summary>
    </member>
    <member name="F:C1.Chart.FitType.AverageY">
      <summary>
            Average Y-value.
            </summary>
    </member>
    <member name="T:C1.Chart.MovingAverageType">
      <summary>
            Specifies the type of MovingAverage Series. 
            </summary>
    </member>
    <member name="F:C1.Chart.MovingAverageType.Simple">
      <summary>
            An average of the last n values.
            </summary>
    </member>
    <member name="F:C1.Chart.MovingAverageType.Weighted">
      <summary>
            Weighted average of the last n values, where the weightage decreases by 1 with each previous value.
            </summary>
    </member>
    <member name="F:C1.Chart.MovingAverageType.Exponential">
      <summary>
            Weighted average of the last n values, where the weightage decreases exponentially with each previous value.
            </summary>
    </member>
    <member name="F:C1.Chart.MovingAverageType.Triangular">
      <summary>
            Weighted average of the last n values, whose result is equivalent to a double smoothed simple moving average.
            </summary>
    </member>
    <member name="T:C1.Chart.Orientation">
      <summary>
            Specifies the orientation of chart element.
            </summary>
    </member>
    <member name="F:C1.Chart.Orientation.Auto">
      <summary>
            Orientation is selected automatically.
            </summary>
    </member>
    <member name="F:C1.Chart.Orientation.Horizontal">
      <summary>
            Horizontal orientation.
            </summary>
    </member>
    <member name="F:C1.Chart.Orientation.Vertical">
      <summary>
            Vertical orientation.
            </summary>
    </member>
    <member name="T:C1.Chart.RadarChartType">
      <summary>
            Specifies the chart type for FlexRadar control.
            </summary>
    </member>
    <member name="F:C1.Chart.RadarChartType.Line">
      <summary>
            Shows trends over a period of time or across categories.
            </summary>
    </member>
    <member name="F:C1.Chart.RadarChartType.Scatter">
      <summary>
            Shows patterns within the data using X and Y coordinates.
            </summary>
    </member>
    <member name="F:C1.Chart.RadarChartType.LineSymbols">
      <summary>
            Shows line chart with a symbol on each data point.
            </summary>
    </member>
    <member name="F:C1.Chart.RadarChartType.Area">
      <summary>
            Shows line chart with the area below the line filled with color.
            </summary>
    </member>
    <member name="T:C1.Chart.FunnelChartType">
      <summary>
            Specifies the type of Funnel Chart.
            </summary>
    </member>
    <member name="F:C1.Chart.FunnelChartType.Default">
      <summary>
            Shows trapezoid chart.
            </summary>
    </member>
    <member name="F:C1.Chart.FunnelChartType.Rectangle">
      <summary>
            Shows bar chart.
            </summary>
    </member>
    <member name="T:C1.Chart.HistogramBinning">
      <summary>
            Specifies the binning mode to define the bins of a Histogram.
            </summary>
    </member>
    <member name="F:C1.Chart.HistogramBinning.Automatic">
      <summary>
            The bin width will be calculated automatically.
            </summary>
    </member>
    <member name="F:C1.Chart.HistogramBinning.BinWidth">
      <summary>
            A positive decimal number for the range of a bin.
            </summary>
    </member>
    <member name="F:C1.Chart.HistogramBinning.NumberOfBins">
      <summary>
            The number of bins for the histogram, including the overflow and underflow bins.
            </summary>
    </member>
    <member name="T:C1.Chart.TextWrapping">
      <summary>
            Text wrap mode of chart legend.
            </summary>
    </member>
    <member name="F:C1.Chart.TextWrapping.None">
      <summary>
            No text wrapping.
            </summary>
    </member>
    <member name="F:C1.Chart.TextWrapping.Wrap">
      <summary>
            Wraps text if its width is larger than available width.
            </summary>
    </member>
    <member name="F:C1.Chart.TextWrapping.Truncate">
      <summary>
            Truncates text if its width is larger than available width.
            </summary>
    </member>
    <member name="T:C1.Chart.AxisGroupSeparator">
      <summary>
            Specifies appearance of axis group separated.
            </summary>
    </member>
    <member name="F:C1.Chart.AxisGroupSeparator.None">
      <summary>
            No separator.
            </summary>
    </member>
    <member name="F:C1.Chart.AxisGroupSeparator.Vertical">
      <summary>
            Vertical line.
            </summary>
    </member>
    <member name="F:C1.Chart.AxisGroupSeparator.Horizontal">
      <summary>
            Horizontal line.
            </summary>
    </member>
    <member name="F:C1.Chart.AxisGroupSeparator.Grid">
      <summary>
            Grid (vertical and horizontal lines).
            </summary>
    </member>
    <member name="T:C1.Chart.DatetimeAxisGroupType">
      <summary>
            Specifies group type for time axis.
            </summary>
    </member>
    <member name="F:C1.Chart.DatetimeAxisGroupType.None">
      <summary>
            No grouping.
            </summary>
    </member>
    <member name="F:C1.Chart.DatetimeAxisGroupType.Year">
      <summary>
            Group by year.
            </summary>
    </member>
    <member name="F:C1.Chart.DatetimeAxisGroupType.Quarter">
      <summary>
            Group by quarter.
            </summary>
    </member>
    <member name="F:C1.Chart.DatetimeAxisGroupType.Month">
      <summary>
            Group by month.
            </summary>
    </member>
    <member name="F:C1.Chart.DatetimeAxisGroupType.Day">
      <summary>
            Group by day.
            </summary>
    </member>
    <member name="F:C1.Chart.DatetimeAxisGroupType.Hour">
      <summary>
            Group by hour.
            </summary>
    </member>
    <member name="T:C1.Chart.LinePatternEnum">
      <summary>
            Use the members of this enumeration to set the value of the LinePattern property in the ChartStyle class.
            </summary>
    </member>
    <member name="F:C1.Chart.LinePatternEnum.Dash">
      <summary>
            A dashed line.
            </summary>
    </member>
    <member name="F:C1.Chart.LinePatternEnum.DashDot">
      <summary>
            A line with alternating dashes and dots.
            </summary>
    </member>
    <member name="F:C1.Chart.LinePatternEnum.DashDotDot">
      <summary>
            A line with series consisting of a dash followed by two dots.
            </summary>
    </member>
    <member name="F:C1.Chart.LinePatternEnum.Dot">
      <summary>
            A dotted line.
            </summary>
    </member>
    <member name="F:C1.Chart.LinePatternEnum.None">
      <summary>
            No line is drawn.
            </summary>
    </member>
    <member name="F:C1.Chart.LinePatternEnum.Solid">
      <summary>
            A solid line.
            </summary>
    </member>
    <member name="T:C1.Chart.LegendScrollBars">
      <summary>
            Specifies which scroll bars wiil be visible in legend.
            </summary>
    </member>
    <member name="F:C1.Chart.LegendScrollBars.None">
      <summary>
            No scroll bars are shown.
            </summary>
    </member>
    <member name="F:C1.Chart.LegendScrollBars.Vertical">
      <summary>
            Show vertical scroll bar if available height is not ehough to show all legend items.
            </summary>
    </member>
    <member name="T:C1.Chart.HitTestInfo">
      <summary>
            Contains information about a part of a FlexChart control at
            a specified coordinate.
            </summary>
    </member>
    <member name="P:C1.Chart.HitTestInfo.Series">
      <summary>
             Gets the chart series at the specified coordinates.
            </summary>
    </member>
    <member name="P:C1.Chart.HitTestInfo.PointIndex">
      <summary>
            Gets the data point index at the specified coordinates.
            </summary>
    </member>
    <member name="P:C1.Chart.HitTestInfo.ChartElement">
      <summary>
            Gets the chart element at the specified coordinates.
            </summary>
    </member>
    <member name="P:C1.Chart.HitTestInfo.Distance">
      <summary>
            Gets the distance from the closest data point.
            </summary>
    </member>
    <member name="P:C1.Chart.HitTestInfo.Item">
      <summary>
            Gets the data object that corresponds to the closest data point.
            </summary>
    </member>
    <member name="P:C1.Chart.HitTestInfo.X">
      <summary>
            Gets the x-value of the closest data point.
            </summary>
    </member>
    <member name="P:C1.Chart.HitTestInfo.Y">
      <summary>
            Gets the y-value of the closest data point.
            </summary>
    </member>
    <member name="M:C1.Chart.HitTestInfo.Format(System.String)">
      <summary>
            Formats the string.
            </summary>
      <param name="s">An input string.</param>
      <returns>Formatted string.</returns>
    </member>
    <member name="T:C1.Chart.Position">
      <summary>
            Specifies the position of chart element on the chart.
            </summary>
    </member>
    <member name="F:C1.Chart.Position.Left">
      <summary>
            The element appears to the left.
            </summary>
    </member>
    <member name="F:C1.Chart.Position.Right">
      <summary>
            The element appears to the right.
            </summary>
    </member>
    <member name="F:C1.Chart.Position.Top">
      <summary>
            The item appears above.
            </summary>
    </member>
    <member name="F:C1.Chart.Position.Bottom">
      <summary>
            The item appears below.
            </summary>
    </member>
    <member name="F:C1.Chart.Position.Auto">
      <summary>
            The element is positioned automatically.
            </summary>
    </member>
    <member name="F:C1.Chart.Position.None">
      <summary>
            The element is not visible.
            </summary>
    </member>
    <member name="T:C1.Chart.AxisType">
      <summary>
            Specifies axis type. 
            </summary>
    </member>
    <member name="F:C1.Chart.AxisType.X">
      <summary>
            X-axis, horizontal.
            </summary>
    </member>
    <member name="F:C1.Chart.AxisType.Y">
      <summary>
            Y-axis, vertical.
            </summary>
    </member>
    <member name="T:C1.Chart.TickMark">
      <summary>
            Specifies whether and where the axis tick marks appear.
            </summary>
    </member>
    <member name="F:C1.Chart.TickMark.None">
      <summary>
            No tick marks appear.
            </summary>
    </member>
    <member name="F:C1.Chart.TickMark.Outside">
      <summary>
            Tick marks appear outside the plot area.
            </summary>
    </member>
    <member name="F:C1.Chart.TickMark.Inside">
      <summary>
            Tick marks appear inside the plot area.
            </summary>
    </member>
    <member name="F:C1.Chart.TickMark.Cross">
      <summary>
            Tick marks cross the axis.
            </summary>
    </member>
    <member name="T:C1.Chart.AxisLabelAlignment">
      <summary>
            Specifies axis label position.
            </summary>
    </member>
    <member name="F:C1.Chart.AxisLabelAlignment.Center">
      <summary>
            At the center.
            </summary>
    </member>
    <member name="F:C1.Chart.AxisLabelAlignment.Left">
      <summary>
            At the left.
            </summary>
    </member>
    <member name="F:C1.Chart.AxisLabelAlignment.Right">
      <summary>
            At the right.
            </summary>
    </member>
    <member name="F:C1.Chart.AxisLabelAlignment.Top">
      <summary>
            At the top.
            </summary>
    </member>
    <member name="F:C1.Chart.AxisLabelAlignment.Bottom">
      <summary>
            At the bottom.
            </summary>
    </member>
    <member name="T:C1.Chart.TimeUnits">
      <summary>
            Specifies time axis units.
            </summary>
    </member>
    <member name="F:C1.Chart.TimeUnits.Day">
      <summary>
            Time units measured in days.
            </summary>
    </member>
    <member name="F:C1.Chart.TimeUnits.Week">
      <summary>
            Time units measured in weeks starting at the first of the year.
            </summary>
    </member>
    <member name="F:C1.Chart.TimeUnits.Month">
      <summary>
            Time units measured in months with the first day of each month.
            </summary>
    </member>
    <member name="F:C1.Chart.TimeUnits.Quarter">
      <summary>
            Time units measured in quarters with the first day of each quarter.
            </summary>
    </member>
    <member name="F:C1.Chart.TimeUnits.Year">
      <summary>
            Time units measured in years, with the first day of each year.
            </summary>
    </member>
    <member name="T:C1.Chart.IAxis">
      <summary>
            IAxis interface.
            </summary>
    </member>
    <member name="M:C1.Chart.IAxis.Convert(System.Double)">
      <summary>
            Converts from data to pixel coordinate.
            </summary>
      <param name="val">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IAxis.ConvertBack(System.Double)">
      <summary>
            Converts from pixel to data coordinate.
            </summary>
      <param name="val">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Chart.IAxis.Position">
      <summary>
            Gets the axis position.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.AxisType">
      <summary>
            Gets the axis type.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.Origin">
      <summary>
            Gets the axis origin.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.Reversed">
      <summary>
            Whether the axis is reversed.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.Labels">
      <summary>
            Whether to draw labels.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.MajorTickMarks">
      <summary>
            Gets the position of major tick marks.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.MajorGrid">
      <summary>
            Whether to draw major grid.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.MajorUnit">
      <summary>
            Gets the major unit.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.MinorTickMarks">
      <summary>
            Gets the position of major tick marks.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.MinorGrid">
      <summary>
            Whether to draw major grid.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.MinorUnit">
      <summary>
            Gets the major unit.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.LogBase">
      <summary>
            Gets the logarithmic base.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.AxisLine">
      <summary>
            Whether to draw axis line.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.LabelAlignment">
      <summary>
            Gets the label alignment.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.LabelAngle">
      <summary>
            Gets the label rotation angle.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.Min">
      <summary>
            Gets the axis minimum.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.Max">
      <summary>
            Gets the axis maximum.
            </summary>
    </member>
    <member name="M:C1.Chart.IAxis.GetMin">
      <summary>
            Gets the actual minimum.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IAxis.GetMax">
      <summary>
            Gets the actual maximum.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Chart.IAxis.Format">
      <summary>
            Gets the format of axis labels.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.Title">
      <summary>
            Gets the axis title. 
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.StaggeredLines">
      <summary>
            Gets the number of axis label levels.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.OverlappingLabels">
      <summary>
            Gets or sets a value indicating how to handle the overlapping axis labels.
            </summary>
    </member>
    <member name="M:C1.Chart.IAxis.GetHeight(C1.Chart.IRenderEngine,System.Double)">
      <summary>
            Gets the axis height.
            </summary>
      <param name="engine">
      </param>
      <param name="maxWidth">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Chart.IAxis.AnnoSize">
      <summary>
            Gets or sets annotation label size.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.HasOrigin">
      <summary>
            Whether the origin is set.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.DesiredSize">
      <summary>
            Gets or sets the axis desired size.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.Chart">
      <summary>
            Gets or sets the parent chart.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.Rect">
      <summary>
            Gets the axis rectangle.
            </summary>
    </member>
    <member name="M:C1.Chart.IAxis.Layout(C1.Chart._Rect,C1.Chart._Rect)">
      <summary>
            Perfomes axis layout.
            </summary>
      <param name="axisRect">
      </param>
      <param name="plotRect">
      </param>
    </member>
    <member name="M:C1.Chart.IAxis.Render(C1.Chart.IRenderEngine)">
      <summary>
            Renders the axis.
            </summary>
      <param name="engine">
      </param>
    </member>
    <member name="M:C1.Chart.IAxis.RenderPolar(C1.Chart.IRenderEngine,C1.Chart.IRadarChart)">
      <summary>
            Renders polar or radar axis.
            </summary>
      <param name="engine">
      </param>
      <param name="radarChart">
      </param>
    </member>
    <member name="M:C1.Chart.IAxis.UpdateActualLimits(System.Nullable{C1.Chart.DataType},System.Double,System.Double,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Double})">
      <summary>
            Updates axis limits.
            </summary>
      <param name="dataType">
      </param>
      <param name="dataMin">
      </param>
      <param name="dataMax">
      </param>
      <param name="labels">
      </param>
      <param name="values">
      </param>
    </member>
    <member name="M:C1.Chart.IAxis.FormatValue(System.Double)">
      <summary>
            Formats specified value.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IAxis.SetCustomConversion(System.Func{System.Double,System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Double,System.Double})">
      <summary>
            Set custom conversion.
            </summary>
      <param name="convert">
      </param>
      <param name="convertBack">
      </param>
    </member>
    <member name="P:C1.Chart.IAxis.CustomLabels">
      <summary>
            Gets or sets custom axis labels.
            </summary>
    </member>
    <member name="M:C1.Chart.IAxis.GetValues">
      <summary>
            Gets label values.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Chart.IAxis.GroupNames">
      <summary>
            Gets or sets the group names.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.GroupItemsPath">
      <summary>
            Gets or sets the items path.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.GroupSeparator">
      <summary>
            Gets the axis group separators
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.GroupProvider">
      <summary>
            Gets the axis group provider
            </summary>
    </member>
    <member name="M:C1.Chart.IAxis.GetGroupStyle">
      <summary>
            Gets the group style by name.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IAxis.SetGroupStyle(C1.Chart._Style)">
      <summary>
            Sets group style with specified name.
            </summary>
      <param name="style">
      </param>
    </member>
    <member name="P:C1.Chart.IAxis.LabelMin">
      <summary>
            Gets or sets whether the minimum axis value is always labeled.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.LabelMax">
      <summary>
            Gets or sets whether the maximum axis value is always labeled.
            </summary>
    </member>
    <member name="P:C1.Chart.IAxis.TimeUnit">
      <summary>
            Gets or sets the units for a time based axis.
            </summary>
    </member>
    <member name="T:C1.Chart.IAxesProvider">
      <summary>
            Auxiliary axes, e.g. color axis.
            </summary>
    </member>
    <member name="T:C1.Chart.QuartileCalculation">
      <summary>
            Specifies the quartile calculation method of Box-whisker series.
            </summary>
    </member>
    <member name="F:C1.Chart.QuartileCalculation.InclusiveMedian">
            Include median value when calculate quartile. 
        </member>
    <member name="F:C1.Chart.QuartileCalculation.ExclusiveMedian">
            Exclude median value when calculate quartile. 
        </member>
    <member name="T:C1.Chart.IBoxWhisker">
      <summary>
            interface interface.
            </summary>
    </member>
    <member name="P:C1.Chart.IBoxWhisker.ShowMeanLine">
      <summary>
            Gets or sets a value that determines whether to show the mean line for the Box-whisker series.
            </summary>
    </member>
    <member name="P:C1.Chart.IBoxWhisker.QuartileCalculation">
      <summary>
            Gets or sets a value that specifies the quartile calculation for the Box-whisker series.
            </summary>
    </member>
    <member name="P:C1.Chart.IBoxWhisker.GapWidth">
      <summary>
            Gets or sets a value that determines the gap width as a percentage for the Box-Whisker series.
            </summary>
      <remarks>The default value for this property is 0.1. The min value is 0 and max value is 1.</remarks>
    </member>
    <member name="P:C1.Chart.IBoxWhisker.GroupWidth">
      <summary>
            Gets or sets a value that determines the group width as a percentage for the Box-Whisker series.
            </summary>
      <remarks>The default value for this property is 0.8. The min value is 0 and max value is 1.</remarks>
    </member>
    <member name="P:C1.Chart.IBoxWhisker.ShowMeanMarks">
      <summary>
            Gets or sets a value that determines whether to show the mean marker for the Box-whisker series.
            </summary>
    </member>
    <member name="P:C1.Chart.IBoxWhisker.ShowInnerPoints">
      <summary>
            Gets or sets a value that determines whether to show the inner points for the Box-whisker series.
            </summary>
    </member>
    <member name="P:C1.Chart.IBoxWhisker.ShowOutliers">
      <summary>
            Gets or sets a value that determines whether to show the outliers for the Box-whisker series.
            </summary>
    </member>
    <member name="M:C1.Chart.IBoxWhisker.UpdateXItems(System.Collections.Generic.List{System.Object})">
      <summary>
            Update the list of x axis items
            </summary>
      <param name="items">the items of x axis</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IBoxWhisker.GetXItemCount">
      <summary>
            Get the count of x axis items
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IBoxWhisker.GetBoxData">
      <summary>
            Get the data of box whisker
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart.IBrushConverter">
      <summary>
            Brush converter interface
            </summary>
    </member>
    <member name="M:C1.Chart.IBrushConverter.Convert(System.Object)">
      <summary>
            Converts brush to string.
            </summary>
      <param name="brush">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IBrushConverter.ConvertBack(System.String)">
      <summary>
            Converts string to brush.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart.IChartBase">
      <summary>
            IChartBase interface.
            </summary>
    </member>
    <member name="P:C1.Chart.IChartBase.Legend">
      <summary>
            Gets the chart legend.
            </summary>
    </member>
    <member name="P:C1.Chart.IChartBase.Header">
      <summary>
            Gets the chart header.
            </summary>
    </member>
    <member name="P:C1.Chart.IChartBase.Footer">
      <summary>
            Gets the chart footer,
            </summary>
    </member>
    <member name="P:C1.Chart.IChartBase.SelectedIndex">
      <summary>
            Gets the selected index.
            </summary>
    </member>
    <member name="P:C1.Chart.IChartBase.SelectionMode">
      <summary>
            Gets the selection mode.
            </summary>
    </member>
    <member name="M:C1.Chart.IChartBase.OnRendering(C1.Chart.IRenderEngine,System.Double,System.Double)">
      <summary>
            Invoked before chart starts rendering.
            </summary>
      <param name="engine">
      </param>
      <param name="w">
      </param>
      <param name="h">
      </param>
    </member>
    <member name="M:C1.Chart.IChartBase.OnRendered(C1.Chart.IRenderEngine,System.Double,System.Double)">
      <summary>
            Invoked after chart finishes rendering.
            </summary>
      <param name="engine">
      </param>
      <param name="w">
      </param>
      <param name="h">
      </param>
    </member>
    <member name="M:C1.Chart.IChartBase.GetMargin">
      <summary>
            Gets the plot margin.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart.IChart">
      <summary>
            IChart interface.
            </summary>
    </member>
    <member name="P:C1.Chart.IChart.ChartType">
      <summary>
            Gets the chart type.
            </summary>
    </member>
    <member name="P:C1.Chart.IChart.Stacking">
      <summary>
            Gets the chart stacking.
            </summary>
    </member>
    <member name="P:C1.Chart.IChart.AxisX">
      <summary>
            Gets the main x-axis.
            </summary>
    </member>
    <member name="P:C1.Chart.IChart.AxisY">
      <summary>
            Gets the main y-axis.
            </summary>
    </member>
    <member name="P:C1.Chart.IChart.DataLabel">
      <summary>
            Gets the chart data label.
            </summary>
    </member>
    <member name="M:C1.Chart.IChart.GetAxes">
      <summary>
            Gets the chart axes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Chart.IChart.Series">
      <summary>
            Gets the series list.
            </summary>
    </member>
    <member name="P:C1.Chart.IChart.SelectedSeries">
      <summary>
            Gets the selected series.
            </summary>
    </member>
    <member name="M:C1.Chart.IChart.GetPlotRect">
      <summary>
            Gets the plot rectangle.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IChart.GetPlotMargin">
      <summary>
            Gets the plot margin.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IChart.IsRotated">
      <summary>
            Gets a value indicating whether the chart is rotated.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IChart.GetXItems">
      <summary>
            Gets the list of x-axis items.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IChart.GetOption(System.String)">
      <summary>
            Gets the chart option.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IChart.OnRenderingData(C1.Chart.IRenderEngine)">
      <summary>
            Invoked before chart data starts rendering.
            </summary>
      <param name="engine">
      </param>
    </member>
    <member name="M:C1.Chart.IChart.OnLabelRendering(C1.Chart.IRenderEngine,System.String@,C1.Chart.ISeries,System.Int32,System.Double@,System.Double@)">
      <summary>
            Called before rendering label. 
            </summary>
      <param name="engine">Render engine.</param>
      <param name="text">Label text.</param>
      <param name="series">Chart series.</param>
      <param name="index">Series index.</param>
      <param name="x">X coordinate.</param>
      <param name="y">Y coordinate.</param>
    </member>
    <member name="M:C1.Chart.IChart.OnLabelRendered(C1.Chart.IRenderEngine,System.String,C1.Chart.ISeries,System.Int32,System.Double,System.Double)">
      <summary>
            Called after rendering label. 
            </summary>
      <param name="engine">Render engine.</param>
      <param name="text">Label text.</param>
      <param name="series">Chart series.</param>
      <param name="index">Series index.</param>
      <param name="x">X coordinate.</param>
      <param name="y">Y coordinate.</param>
    </member>
    <member name="M:C1.Chart.IChart.CreateSeries">
      <summary>
            Creates an instance of series.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart.ISupportCustomRenderEngine">
      <summary>
            Support of external render engines.
            </summary>
    </member>
    <member name="M:C1.Chart.ISupportCustomRenderEngine.Attach(C1.Chart.ICustomRenderEngine)">
      <summary>
            Attaches external render engine.
            </summary>
      <param name="engine">
      </param>
    </member>
    <member name="M:C1.Chart.ISupportCustomRenderEngine.Render(C1.Chart.IRenderEngine,System.Int32,System.Int32)">
      <summary>
            Render the chart to external render engine.
            </summary>
      <param name="engine">
      </param>
      <param name="w">
      </param>
      <param name="h">
      </param>
    </member>
    <member name="M:C1.Chart.ISupportCustomRenderEngine.Detach">
      <summary>
            Detaches external render engine.
            </summary>
    </member>
    <member name="T:C1.Chart.ICustomRenderEngine">
      <summary>
            External render engine interface.
            </summary>
    </member>
    <member name="M:C1.Chart.ICustomRenderEngine.Attach(C1.Chart.IChart)">
      <summary>
            Attach render engine to the chart.
            </summary>
      <param name="chart">
      </param>
    </member>
    <member name="M:C1.Chart.ICustomRenderEngine.Detach">
      <summary>
            Detach render engine from chart.
            </summary>
    </member>
    <member name="T:C1.Chart.IRadarChart">
      <summary>
            Radar chart interface.
            </summary>
    </member>
    <member name="P:C1.Chart.IRadarChart.Center">
      <summary>
            Gets the center.
            </summary>
    </member>
    <member name="M:C1.Chart.IRadarChart.Convert(C1.Chart._Point)">
      <summary>
            Converts the point.
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IRadarChart.ConvertAngle(System.Double)">
      <summary>
            Converts the angle.
            </summary>
      <param name="val">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Chart.IRadarChart.Radius">
      <summary>
            Gets the radius.
            </summary>
    </member>
    <member name="P:C1.Chart.IRadarChart.StartAngle">
      <summary>
            Gets or sets the starting angle.
            </summary>
    </member>
    <member name="P:C1.Chart.IRadarChart.Reversed">
      <summary>
            Whether the chart is reversed.
            </summary>
    </member>
    <member name="P:C1.Chart.IRadarChart.IsPolar">
      <summary>
            Whether the chart is polar.
            </summary>
    </member>
    <member name="T:C1.Chart.ErrorAmount">
      <summary>
            Specifies the error amount of the series, it can be a standard error amount, a percentage or a standard deviation.
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorAmount.FixedValue">
      <summary>
            Indicates the error with a fixed value. 
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorAmount.Percentage">
      <summary>
            Indicates the error with a percentage value.
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorAmount.StandardDeviation">
      <summary>
            Indicates the error with the standard deviation.
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorAmount.StandardError">
      <summary>
            Indicates the error with the standard error.
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorAmount.Custom">
      <summary>
            Indicates the error with the custom value.
            </summary>
    </member>
    <member name="T:C1.Chart.ErrorBarEndStyle">
      <summary>
            Specifies the end style of the error bar.
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorBarEndStyle.Cap">
      <summary>
            Error bar with cap.
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorBarEndStyle.NoCap">
      <summary>
            Error bar without cap. 
             </summary>
    </member>
    <member name="T:C1.Chart.ErrorBarDirection">
      <summary>
            Specifies the direction of the error bar.
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorBarDirection.Both">
      <summary>
            Shows both direction.
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorBarDirection.Minus">
      <summary>
            Only shows minus direction.
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorBarDirection.Plus">
      <summary>
            Only shows plus direction.
            </summary>
    </member>
    <member name="T:C1.Chart.ErrorValueType">
      <summary>
            Specifies the type of error value.
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorValueType.Minus">
      <summary>
            Minus error value.
            </summary>
    </member>
    <member name="F:C1.Chart.ErrorValueType.Plus">
      <summary>
            TPlus error value.
            </summary>
    </member>
    <member name="T:C1.Chart.IErrorBar">
      <summary>
            IErrorBar interface
            </summary>
    </member>
    <member name="P:C1.Chart.IErrorBar.Direction">
      <summary>
            Gets or sets a value that specifies the direction of the error.
            </summary>
    </member>
    <member name="P:C1.Chart.IErrorBar.EndStyle">
      <summary>
            Gets or sets a value that specifies the end style of the series.
            </summary>
    </member>
    <member name="P:C1.Chart.IErrorBar.ErrorAmount">
      <summary>
            Gets or sets a value that specifies the error amount of the series.
            </summary>
    </member>
    <member name="P:C1.Chart.IErrorBar.ErrorValue">
      <summary>
            Gets or sets a value that specifies the error value of the series.
            </summary>
      <remarks>
            This property should be work with errorAmount property.
            If ErrorAmount is ErrorAmount.FixedValue, the value property is a fixed number value.
            If ErrorAmount is ErrorAmount.Percentage, the value property is a percentage number value between 0 and 1.
            If ErrorAmount is ErrorAmount.StandardDeviation, the value property is a percentage number of calculated standard deviation value.
            </remarks>
    </member>
    <member name="P:C1.Chart.IErrorBar.CustomPlusErrorValue">
      <summary>
            Gets or sets a value that specifies the custom plus error value.
            </summary>
      <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
    </member>
    <member name="P:C1.Chart.IErrorBar.CustomMinusErrorValue">
      <summary>
            Gets or sets a value that specifies the cumstom minus error value.
            </summary>
      <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
    </member>
    <member name="T:C1.Chart.IDistributionSeries">
      <summary>
            General distribution series
            </summary>
    </member>
    <member name="P:C1.Chart.IDistributionSeries.BinWidth">
      <summary>
            Gets or sets the bin width
            </summary>
    </member>
    <member name="T:C1.Chart.IHistogramSeries">
      <summary>
            Histogram series
            </summary>
    </member>
    <member name="P:C1.Chart.IHistogramSeries.NormalCurve">
      <summary>
            Gets or sets the normal curve
            </summary>
    </member>
    <member name="P:C1.Chart.IHistogramSeries.HistogramAppearance">
      <summary>
            Gets the histogram appearance
            </summary>
    </member>
    <member name="P:C1.Chart.IHistogramSeries.CumulativeMode">
      <summary>
            Gets sets the cumulative mode state
            </summary>
    </member>
    <member name="T:C1.Chart.INormalCurve">
      <summary>
            Normal Curve <see href="http://helpcentral.componentone.com/nethelp/c1chart2d/frequencygraph.html"></see></summary>
    </member>
    <member name="P:C1.Chart.INormalCurve.Visible">
      <summary>
            Gets or sets the visible of normal curve
            </summary>
    </member>
    <member name="T:C1.Chart.HistogramAppearance">
      <summary>
            Histogram appearance enums. 
            </summary>
    </member>
    <member name="F:C1.Chart.HistogramAppearance.Histogram">
      <summary>
            Histogram
            </summary>
    </member>
    <member name="F:C1.Chart.HistogramAppearance.FrequencyPolygon">
      <summary>
            FrequencyPolygon
            </summary>
    </member>
    <member name="F:C1.Chart.HistogramAppearance.HistogramAndFrequencyPolygon">
      <summary>
            Histogram and FrequencyPolygon
            </summary>
    </member>
    <member name="T:C1.Chart.ILegend">
      <summary>
            ILegend interface.
            </summary>
    </member>
    <member name="P:C1.Chart.ILegend.Position">
      <summary>
            Gets or sets the legend position.
            </summary>
    </member>
    <member name="P:C1.Chart.ILegend.ItemMaxWidth">
      <summary>
            Gets or sets the legend max width.
            </summary>
    </member>
    <member name="P:C1.Chart.ILegend.TextWrapping">
      <summary>
            Gets or sets the legend text wrap mode.
            </summary>
    </member>
    <member name="M:C1.Chart.ILegend.GetPosition(System.Double,System.Double)">
      <summary>
            Gets the automatic position.
            </summary>
      <param name="w">
      </param>
      <param name="h">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.ILegend.GetDesiredSize(C1.Chart.IRenderEngine,System.Double,System.Double)">
      <summary>
            Gets the desired legend size.
            </summary>
      <param name="engine">
      </param>
      <param name="w">
      </param>
      <param name="h">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.ILegend.Render(C1.Chart.IRenderEngine,C1.Chart.Position,C1.Chart._Rect)">
      <summary>
            Render the legend.
            </summary>
      <param name="engine">
      </param>
      <param name="pos">
      </param>
      <param name="rect">
      </param>
    </member>
    <member name="M:C1.Chart.ILegend.HitTest(System.Double,System.Double)">
      <summary>
            Hit testing.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Chart.ILegend.Title">
      <summary>
            Gets the legend title.
            </summary>
    </member>
    <member name="P:C1.Chart.ILegend.Orientation">
      <summary>
            Gets the legend orientation.
            </summary>
    </member>
    <member name="P:C1.Chart.ILegend.Reversed">
      <summary>
            Gets or sets the legend reversed order.
            </summary>
    </member>
    <member name="M:C1.Chart.IPieChart.OnSliceRendering(C1.Chart.IRenderEngine,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Called before rendering slice. 
            </summary>
      <param name="engine">Render engine.</param>
      <param name="index">Index of data point.</param>
      <param name="centerX">Pie center coordinate.</param>
      <param name="centerY">Pie center coordinate.</param>
      <param name="radius">Pie radius.</param>
      <param name="innerRadius">Pie inner radius.</param>
      <param name="angle">Slice angle.</param>
      <param name="sweep">Slice sweep.</param>
      <returns>Whether to perform default symbol rendering.</returns>
    </member>
    <member name="M:C1.Chart.IPieChart.OnSliceRendered(C1.Chart.IRenderEngine,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Called after rendering slice. 
            </summary>
      <param name="engine">Render engine.</param>
      <param name="index">Index of data point.</param>
      <param name="centerX">Pie center X coordinate.</param>
      <param name="centerY">Pie center Y coordinate.</param>
      <param name="radius">Pie radius.</param>
      <param name="innerRadius">Pie inner radius.</param>
      <param name="angle">Slice angle.</param>
      <param name="sweep">Slice sweep.</param>
    </member>
    <member name="M:C1.Chart.IPieChart.OnLabelRendering(C1.Chart.IRenderEngine,System.String@,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Called before rendering label. 
            </summary>
      <param name="engine">Render engine.</param>
      <param name="text">Label text.</param>
      <param name="centerX">Pie center X coordinate.</param>
      <param name="centerY">Pie center Y coordinate.</param>
      <param name="index">Point index.</param>
      <param name="radius">Pie radius.</param>
      <param name="innerRadius">Pie inner radius.</param>
      <param name="angle">Slice angle.</param>
      <param name="sweep">Slice sweep.</param>
    </member>
    <member name="M:C1.Chart.IPieChart.OnLabelRendered(C1.Chart.IRenderEngine,System.String,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Called after rendering label. 
            </summary>
      <param name="engine">Render engine.</param>
      <param name="text">Label text.</param>
      <param name="centerX">Pie center X coordinate.</param>
      <param name="centerY">Pie center Y coordinate.</param>
      <param name="index">Point index.</param>
      <param name="radius">Pie radius.</param>
      <param name="innerRadius">Pie inner radius.</param>
      <param name="angle">Slice angle.</param>
      <param name="sweep">Slice sweep.</param>
    </member>
    <member name="T:C1.Chart.IRenderEngine">
      <summary>
            Render engine.
            </summary>
    </member>
    <member name="M:C1.Chart.IRenderEngine.SetStroke(System.Object)">
      <summary>
            Sets the current stroke brush.
            </summary>
      <param name="brush">Native brush or argb color as integer.</param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.SetStrokeThickness(System.Double)">
      <summary>
            Sets the stroke thickness.
            </summary>
      <param name="thickness">
      </param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.SetStrokePattern(System.Double[])">
      <summary>
            Sets the stroke pattern.
            </summary>
      <param name="pattern">
      </param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.SetFill(System.Object)">
      <summary>
            Sets the fill brush.
            </summary>
      <param name="brush">
      </param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.SetOpacity(System.Object,System.Double)">
      <summary>
            Changes the brush opacity.
            </summary>
      <param name="brush">Brush object</param>
      <param name="opacity">Opacity</param>
      <returns>Brush object</returns>
    </member>
    <member name="M:C1.Chart.IRenderEngine.SetFont(System.Object)">
      <summary>
            Sets the font.
            </summary>
      <param name="font">Native font object.</param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.DrawLine(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draw line between two points using current stroke attributes.
            </summary>
      <param name="x1">x-coordinate of first point.</param>
      <param name="y1">y-coordinate of first point.</param>
      <param name="x2">x-coordinate of second point.</param>
      <param name="y2">y-coordinate of second point.</param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.DrawLines(System.Double[],System.Double[])">
      <summary>
            Draw lines using specified coordinates.
            </summary>
      <param name="xs">Array of x-coordinates.</param>
      <param name="ys">Array of y-coordinates.</param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.DrawRect(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draw rectangle with currect stroke and fill.
            </summary>
      <param name="x">x-coordinate of rectangle.</param>
      <param name="y">y-coordinate of rectangle.</param>
      <param name="w">Rectangle width.</param>
      <param name="h">Rectangle height.</param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.DrawPolygon(System.Double[],System.Double[])">
      <summary>
            Draw polygon with currect stroke and fill.
            </summary>
      <param name="xs">Array of x-coordinates.</param>
      <param name="ys">Array of y-coordinates.</param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.DrawEllipse(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draw ellipse with currect stroke and fill.
            </summary>
      <param name="cx">X-coordinate of ellipse center.</param>
      <param name="cy">Y-coordinate of ellipse center.</param>
      <param name="rx">x-radius.</param>
      <param name="ry">y-radius.</param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.DrawImage(System.Object,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Draw image using special source.
            </summary>
      <param name="source">the source of image.</param>
      <param name="x">x-coordinate of image.</param>
      <param name="y">y-coordinate of image.</param>
      <param name="w">Image width.</param>
      <param name="h">Image height.</param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.MeasureString(System.String)">
      <summary>
            Measures size of string.
            </summary>
      <param name="s">String to measure.</param>
      <returns>Size.</returns>
    </member>
    <member name="M:C1.Chart.IRenderEngine.MeasureString(System.String,C1.Chart._Size)">
      <summary>
            Measures size of string in layout area.
            </summary>
      <param name="s">String to measure.</param>
      <param name="sz">Layout size.</param>
      <returns>Size.</returns>
    </member>
    <member name="M:C1.Chart.IRenderEngine.DrawString(System.String,C1.Chart._Point)">
      <summary>
            Draw string at specified position.
            </summary>
      <param name="s">String to draw.</param>
      <param name="pos">Position.</param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.DrawString(System.String,C1.Chart._Rect,C1.Chart.TextWrapping)">
      <summary>
            Draw string at specified area.
            </summary>
      <param name="s">String to draw.</param>
      <param name="area">Area.</param>
      <param name="textWrapping">Text wrapping.</param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.DrawStringRotated(System.String,C1.Chart._Point,C1.Chart._Point,System.Double)">
      <summary>
            Draw rotated string at specified position.
            </summary>
      <param name="s">
      </param>
      <param name="pos">
      </param>
      <param name="center">
      </param>
      <param name="angle">
      </param>
    </member>
    <member name="M:C1.Chart.IRenderEngine.SetClipRect(System.Nullable{C1.Chart._Rect})">
      <summary>
            Sets clip rectangle.
            </summary>
      <param name="rect">Clip rectangle. Null clear clipping rectangle.</param>
    </member>
    <member name="T:C1.Chart.ISeries">
      <summary>
            ISeries interface.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.ChartType">
      <summary>
            Gets or sets the chart type.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.Visibility">
      <summary>
            Gets or sets the series visibility.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.Name">
      <summary>
            Gets or sets the series name.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.AxisX">
      <summary>
            Gets or sets the series x-axis.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.AxisY">
      <summary>
            Gets or sets the series y-axis.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.Chart">
      <summary>
            Gets or sets the chart.
            </summary>
    </member>
    <member name="M:C1.Chart.ISeries.GetValues(System.Int32)">
      <summary>
            Gets the data values.
            </summary>
      <param name="dim">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.ISeries.GetDataType(System.Int32)">
      <summary>
            Gets the data type.
            </summary>
      <param name="dim">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.ISeries.GetLegendItemName(System.Int32)">
      <summary>
            Gets the name of legend.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.ISeries.GetLegendItemGroup(System.Int32)">
      <summary>
            Gets the name of legend group.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.ISeries.GetLegendItemImageSource(System.Int32,C1.Chart._Size@)">
      <summary>
            Gets the image source for the icon presented for the legend item.
            </summary>
      <param name="index">
      </param>
      <param name="sz">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.ISeries.GetLegendItemStyle(System.Int32)">
      <summary>
            Gets the style of legend.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.ISeries.GetLegendItemLength">
      <summary>
            Get the number of series items in the legend.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.SymbolSize">
      <summary>
            Gets the series symbol size.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.SymbolMarker">
      <summary>
            Gets the series symbol marker.
            </summary>
    </member>
    <member name="M:C1.Chart.ISeries.GetItem(System.Int32)">
      <summary>
            Gets the data item by index. 
            </summary>
      <param name="i">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.Chart.ISeries.HasCustomSymbol">
      <summary>
            Whether the series has custom symbol rendering.
            </summary>
    </member>
    <member name="M:C1.Chart.ISeries.OnSymbolRendering(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
      <summary>
            Called before rendering symbol. 
            </summary>
      <param name="engine">Render engine,</param>
      <param name="i">Index of data point.</param>
      <param name="x">X pixel coordinate.</param>
      <param name="y">Y pixel coordinate.</param>
      <returns>Whether to perform default symbol rendering.</returns>
    </member>
    <member name="M:C1.Chart.ISeries.OnSymbolRendered(C1.Chart.IRenderEngine,System.Int32,System.Double,System.Double)">
      <summary>
            Called after rendering symbol. 
            </summary>
      <param name="engine">Render engine,</param>
      <param name="i">Index of data point.</param>
      <param name="x">X pixel coordinate.</param>
      <param name="y">Y pixel coordinate.</param>
    </member>
    <member name="P:C1.Chart.ISeries.DataSource">
      <summary>
            Gets or sets data source.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.Binding">
      <summary>
            Gets or sets the binding.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.BindingX">
      <summary>
            Gets or sets the x-binding.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.StackingGroup">
      <summary>
            Gets or sets the group index for series, only effect in bar and column chart type.
            </summary>
    </member>
    <member name="P:C1.Chart.ISeries.LegendGroup">
      <summary>
            Gets or sets the legend group title in which the series should be included.
            </summary>
    </member>
    <member name="M:C1.Chart.ISeries.GetDataRect(C1.Chart._Rect)">
      <summary>
            Get the series bounding rectangle in data coordinates.
            </summary>
      <param name="currentRect">The current rectangle of chart</param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart.IStyleProvider">
      <summary>
            IStyle provider interface.
            </summary>
    </member>
    <member name="M:C1.Chart.IStyleProvider.GetStyle(System.String)">
      <summary>
            Gets the style by name.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IStyleProvider.SetStyle(C1.Chart._Style,System.String)">
      <summary>
            Sets style with specified name.
            </summary>
      <param name="style">
      </param>
      <param name="name">
      </param>
    </member>
    <member name="T:C1.Chart.IWaterfall">
      <summary>
            IWaterfall interface.
            </summary>
    </member>
    <member name="P:C1.Chart.IWaterfall.ConnectorLines">
      <summary>
            Gets or sets a value that determines whether to show connector lines.
            </summary>
    </member>
    <member name="P:C1.Chart.IWaterfall.IntermediateTotalLabels">
      <summary>
            Gets or sets the value of the property that contains the label of the intermediate total bar, it should be an array or a string.
            </summary>
    </member>
    <member name="P:C1.Chart.IWaterfall.IntermediateTotalPositions">
      <summary>
            Gets or sets the value of the property that contains the index for positions of the intermediate total bar.
            </summary>
    </member>
    <member name="P:C1.Chart.IWaterfall.RelativeData">
      <summary>
            Gets or sets a value that determines whether the given data is relative.
            </summary>
    </member>
    <member name="P:C1.Chart.IWaterfall.ShowIntermediateTotal">
      <summary>
            Gets or sets a value that determines whether to show the intermediate total bar.
            </summary>
    </member>
    <member name="P:C1.Chart.IWaterfall.ShowTotal">
      <summary>
            Gets or sets a value that determines whether show total bar.
            </summary>
    </member>
    <member name="P:C1.Chart.IWaterfall.Start">
      <summary>
            Gets or sets a value that determines the value of the start bar.
            </summary>
    </member>
    <member name="P:C1.Chart.IWaterfall.StartLabel">
      <summary>
            Identifies the Start dependency property.
            </summary>
    </member>
    <member name="P:C1.Chart.IWaterfall.TotalLabel">
      <summary>
            Gets or sets the label of the total bar.
            </summary>
    </member>
    <member name="M:C1.Chart.IWaterfall.GetYValues">
      <summary>
            Gets the list of y axis values.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IWaterfall.IsIntermediateTotal(System.Int32)">
      <summary>
            Checks whether the item is intermediate total or not.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart.IWaterfall.UpdateXItems(System.Collections.Generic.List{System.Object})">
      <summary>
            Updates the list of x axis items.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart.IPalette">
      <summary>
            IPalette interface.
            </summary>
    </member>
    <member name="M:C1.Chart.IPalette.GetColor(System.Int32)">
      <summary>
            Gets the palette color by index.
            </summary>
      <param name="i">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart.Palette">
      <summary>
            Specifies chart palette.
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Standard">
      <summary>
            Standard.
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Cocoa">
      <summary>
            Cocoa
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Coral">
      <summary>
            Coral
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Dark">
      <summary>
            Dark
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Highcontrast">
      <summary>
            Highcontrast
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Light">
      <summary>
            Light
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Midnight">
      <summary>
            Midnight
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Modern">
      <summary>
            Modern
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Organic">
      <summary>
            Organic
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Slate">
      <summary>
            Slate
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Zen">
      <summary>
            Zen
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Cyborg">
      <summary>
            Cyborg
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Superhero">
      <summary>
            Superhero
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Flatly">
      <summary>
            Flatly
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Darkly">
      <summary>
            Darkly
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Cerulean">
      <summary>
            Cerulean
            </summary>
    </member>
    <member name="F:C1.Chart.Palette.Custom">
      <summary>
            Custom palette.
            </summary>
    </member>
    <member name="T:C1.Chart.TreeMapType">
      <summary>
            Specifies the treemap type.
            </summary>
    </member>
    <member name="F:C1.Chart.TreeMapType.Squarified">
      <summary>
            Shows squarified treemap.
            </summary>
    </member>
    <member name="F:C1.Chart.TreeMapType.Horizontal">
      <summary>
            Shows horizontal squarified treemap.
            </summary>
    </member>
    <member name="F:C1.Chart.TreeMapType.Vertical">
      <summary>
            Shows vertical squarified treemap.
            </summary>
    </member>
    <member name="T:C1.Chart._Rect">
      <summary>
            Represents rectangle.
            </summary>
    </member>
    <member name="F:C1.Chart._Rect.Left">
      <summary>
            Left coordinate.
            </summary>
    </member>
    <member name="F:C1.Chart._Rect.Top">
      <summary>
            Top coordinate.
            </summary>
    </member>
    <member name="F:C1.Chart._Rect.Width">
      <summary>
            Width of rectangle.
            </summary>
    </member>
    <member name="F:C1.Chart._Rect.Height">
      <summary>
            Height of rectangle.
            </summary>
    </member>
    <member name="P:C1.Chart._Rect.Right">
      <summary>
            Gets the right coordinate of rectangle.
            </summary>
    </member>
    <member name="P:C1.Chart._Rect.Bottom">
      <summary>
            Gets the bottom coordinate of rectangle.
            </summary>
    </member>
    <member name="M:C1.Chart._Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create an instance of rectangle.
            </summary>
      <param name="l">
      </param>
      <param name="t">
      </param>
      <param name="w">
      </param>
      <param name="h">
      </param>
    </member>
    <member name="M:C1.Chart._Rect.Contains(System.Double,System.Double)">
      <summary>
            Returns whether the point specified by coordinates is inside rectangle.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:C1.Chart._Rect.Empty">
      <summary>
            Empty rectangle.
            </summary>
    </member>
    <member name="M:C1.Chart._Rect.op_Equality(C1.Chart._Rect,C1.Chart._Rect)">
      <summary>
            Equality operator. 
            </summary>
      <param name="rect1">
      </param>
      <param name="rect2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart._Rect.op_Inequality(C1.Chart._Rect,C1.Chart._Rect)">
      <summary>
            Non-equality operator.
            </summary>
      <param name="rect1">
      </param>
      <param name="rect2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart._Rect.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to this instance. 
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart._Rect.GetHashCode">
      <summary>
            Returns the hash code of the instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Chart._Rect.Intersect(C1.Chart._Rect)">
      <summary>
            Returns a value indicating whether the rectangle intersects with the specified rectangle.
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart._Size">
      <summary>
            Represents size.
            </summary>
    </member>
    <member name="F:C1.Chart._Size.Width">
      <summary>
            Width.
            </summary>
    </member>
    <member name="F:C1.Chart._Size.Height">
      <summary>
            Height
            </summary>
    </member>
    <member name="M:C1.Chart._Size.#ctor(System.Double,System.Double)">
      <summary>
            Creates am instance of _Size.
            </summary>
      <param name="w">
      </param>
      <param name="h">
      </param>
    </member>
    <member name="T:C1.Chart._Margin">
      <summary>
      </summary>
    </member>
    <member name="F:C1.Chart._Margin.Left">
      <summary>
            Left margin.
            </summary>
    </member>
    <member name="F:C1.Chart._Margin.Right">
      <summary>
            Right margin.
            </summary>
    </member>
    <member name="F:C1.Chart._Margin.Top">
      <summary>
            Top margin.
            </summary>
    </member>
    <member name="F:C1.Chart._Margin.Bottom">
      <summary>
            Bottom margin.
            </summary>
    </member>
    <member name="M:C1.Chart._Margin.Apply(C1.Chart._Rect)">
      <summary>
            Applies margin to specified rectangle.
            </summary>
      <param name="rect">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart._Point">
      <summary>
            Represents point.
            </summary>
    </member>
    <member name="F:C1.Chart._Point.X">
      <summary>
            X-coordinate.
            </summary>
    </member>
    <member name="F:C1.Chart._Point.Y">
      <summary>
            Y-coordinate.
            </summary>
    </member>
    <member name="M:C1.Chart._Point.#ctor(System.Double,System.Double)">
      <summary>
            Creates an instance of _Point.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:C1.Chart._Point.Clone">
      <summary>
            Clones the specified point.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.Chart._Style">
      <summary>
            Represents portable style.
            </summary>
    </member>
    <member name="P:C1.Chart._Style.Stroke">
      <summary>
            Gets or sets the stroke object.
            </summary>
    </member>
    <member name="P:C1.Chart._Style.StrokeThickness">
      <summary>
            Gets or sets the stroke thickness.
            </summary>
    </member>
    <member name="P:C1.Chart._Style.StrokePattern">
      <summary>
            Gets or sets the stroke pattern.
            </summary>
    </member>
    <member name="P:C1.Chart._Style.Fill">
      <summary>
            Gets or sets the fill object.
            </summary>
    </member>
    <member name="P:C1.Chart._Style.Font">
      <summary>
            Gets or sets the font object.
            </summary>
    </member>
    <member name="P:C1.Chart._Style.HAlign">
      <summary>
            Gets or sets horizontal alignment.
            </summary>
    </member>
    <member name="M:C1.Chart._Style.Combine(C1.Chart._Style)">
      <summary>
            Combines styles.
            </summary>
      <param name="parentStyle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Chart.FlexPieSlice">
      <summary>
            This class is used in design-time.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.FlexPieSlice.#ctor">
      <summary>
            Creates an instance of <see cref="T:C1.WPF.Chart.FlexPieSlice" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.FlexPieSlice.#ctor(System.Double,System.String)">
      <summary>
            Creates an instance of <see cref="T:C1.WPF.Chart.FlexPieSlice" />.
            </summary>
      <param name="value">
      </param>
      <param name="name">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.FlexPieSlice.Name">
      <summary>
            Gets or sets the value of Name property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexPieSlice.Value">
      <summary>
            Gets or sets the value of Value property.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.FlexPieSlice.PropertyChanged">
      <summary>
            Fires when property has been changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.FlexPieSliceCollection">
      <summary>
            Provides access to an ordered, strongly typed collection of <see cref="T:C1.WPF.Chart.FlexPieSlice" /> objects.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Annotation.AnnotationBase">
      <summary>
            Represents the base class of annotations for the <see cref="T:C1.WPF.Chart.Annotation.AnnotationLayer" /></summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.AnnotationBase.#ctor">
      <summary>
            Create an instance of BaseAnnotation.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.AnnotationBase.Attachment">
      <summary>
            Gets or sets the attachment of the annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.AnnotationBase.AttachmentProperty">
      <summary>
            Identifies the Attachment dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.AnnotationBase.Location">
      <summary>
            Gets or sets the location of annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.AnnotationBase.LocationProperty">
      <summary>
            Identifies the Location dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.AnnotationBase.PointIndex">
      <summary>
            Gets or sets the data point index of the annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.AnnotationBase.PointIndexProperty">
      <summary>
            Identifies the PointIndex dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.AnnotationBase.Position">
      <summary>
            Gets or sets the position of annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.AnnotationBase.PositionProperty">
      <summary>
            Identifies the Position dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.AnnotationBase.SeriesIndex">
      <summary>
            Gets or sets the data series index of the annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.AnnotationBase.SeriesIndexProperty">
      <summary>
            Identifies the SeriesIndex dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.AnnotationBase.TooltipText">
      <summary>
            Gets or sets the tooltip of the annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.AnnotationBase.TooltipTextProperty">
      <summary>
            Identifies the TooltipText dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.AnnotationBase.Style">
      <summary>
            Gets or sets the style of annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.AnnotationBase.StyleProperty">
      <summary>
            Identifies the Style dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Annotation.AnnotationLayer">
      <summary>
            Represents an annotation layer for <see cref="T:C1.WPF.Chart.C1FlexChart" /></summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.AnnotationLayer.#ctor">
      <summary>
            Create an instance of AnnotationLayer.
            </summary>
      <param name="chart">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.AnnotationLayer.Annotations">
      <summary>
            Gets the collection of annotation elements in the <see cref="T:C1.WPF.Chart.Annotation.AnnotationLayer" /></summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.AnnotationLayer.Chart">
      <summary>
            Gets or sets the associated chart.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.AnnotationLayer.ChartProperty">
      <summary>
            Identifies the Chart dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Annotation.Circle">
      <summary>
            Represents a circle annotation for <see cref="T:C1.WPF.Chart.Annotation.AnnotationLayer" /></summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Circle.#ctor">
      <summary>
            Create an instance of Circle.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Circle.#ctor(System.String)">
      <summary>
            Create an instance of Circle.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Circle.#ctor(System.String,System.Int32)">
      <summary>
            Create an instance of Circle.
            </summary>
      <param name="value">
      </param>
      <param name="radius">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Circle.Radius">
      <summary>
            Gets or sets the radius of circle annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Circle.RadiusProperty">
      <summary>
            Identifies the Radius dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Annotation.Ellipse">
      <summary>
            Represents an ellipse annotation for <see cref="T:C1.WPF.Chart.Annotation.AnnotationLayer" /></summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Ellipse.#ctor">
      <summary>
            Create an instance of Ellipse.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Ellipse.#ctor(System.String)">
      <summary>
            Create an instance of Ellipse.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Ellipse.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
            Create an instance of Ellipse.
            </summary>
      <param name="value">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Ellipse.Width">
      <summary>
            Gets or sets the width of ellipse annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Ellipse.WidthProperty">
      <summary>
            Identifies the Width dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Ellipse.Height">
      <summary>
            Gets or sets the height of ellipse annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Ellipse.HeightProperty">
      <summary>
            Identifies the Height dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Annotation.Image">
      <summary>
            Represents an image annotation for the <see cref="T:C1.WPF.Chart.Annotation.AnnotationLayer" /></summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Image.#ctor">
      <summary>
            Create an instance of Image.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Image.#ctor(System.String)">
      <summary>
            Create an instance of Image.
            </summary>
      <param name="path">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Image.#ctor(System.String,System.Double,System.Double)">
      <summary>
            Create an instance of Image.
            </summary>
      <param name="path">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Image.#ctor(System.Windows.Media.ImageSource)">
      <summary>
            Create an instance of Image.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Image.#ctor(System.Windows.Media.ImageSource,System.Double,System.Double)">
      <summary>
            Create an instance of Image.
            </summary>
      <param name="value">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Image.Source">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.ImageSource" /> for image annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Image.SourceProperty">
      <summary>
            Identifies the Source dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Image.Width">
      <summary>
            Gets or sets the width of image annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Image.WidthProperty">
      <summary>
            Identifies the Width dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Image.Height">
      <summary>
            Gets or sets the height of image annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Image.HeightProperty">
      <summary>
            Identifies the Height dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Annotation.Line">
      <summary>
            Represents a line annotation for <see cref="T:C1.WPF.Chart.Annotation.AnnotationLayer" /></summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Line.#ctor">
      <summary>
            Create an instance of Line.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Line.#ctor(System.String)">
      <summary>
            Create an instance of Line.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Line.#ctor(System.String,System.Windows.Point,System.Windows.Point)">
      <summary>
            Create an instance of Line.
            </summary>
      <param name="value">
      </param>
      <param name="start">
      </param>
      <param name="end">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Line.Start">
      <summary>
            Gets or sets the start point of line annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Line.StartProperty">
      <summary>
            Identifies the Start dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Line.End">
      <summary>
            Gets or sets the end point of the line annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Line.EndProperty">
      <summary>
            Identifies the End dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Annotation.Polygon">
      <summary>
            Represents a polygon annotation for <see cref="T:C1.WPF.Chart.Annotation.AnnotationLayer" /></summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Polygon.#ctor">
      <summary>
            Create an instance of Polygon.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Polygon.#ctor(System.String)">
      <summary>
            Create an instance of Polygon.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Polygon.Points">
      <summary>
            Gets the collection of points of the polygon annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Polygon.PointsProperty">
      <summary>
            Identifies the Points dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Polygon.ContentCenterProperty">
      <summary>
            Identifies the ContentCenter dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Polygon.ContentCenter">
      <summary>
            Gets or sets the center of annotation's content.
            If the property value is null (default value), the position of content is selected automatically.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Annotation.Rectangle">
      <summary>
            Represents a rectangle annotation for <see cref="T:C1.WPF.Chart.Annotation.AnnotationLayer" /></summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Rectangle.#ctor">
      <summary>
            Create an instance of Rectangle.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Rectangle.#ctor(System.String)">
      <summary>
            Create an instance of Rectangle.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Rectangle.#ctor(System.String,System.Double,System.Double)">
      <summary>
            Create an instance of Rectangle.
            </summary>
      <param name="value">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Rectangle.Width">
      <summary>
            Gets or sets the width of rectangle annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Rectangle.WidthProperty">
      <summary>
            Identifies the Width dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Rectangle.Height">
      <summary>
            Gets or sets the height of rectangle annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Rectangle.HeightProperty">
      <summary>
            Identifies the Height dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Annotation.Shape">
      <summary>
            Represents a base class of shape annotations for the <see cref="T:C1.WPF.Chart.Annotation.AnnotationLayer" /></summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Shape.#ctor">
      <summary>
            Create an instance of Shape.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Shape.#ctor(System.String)">
      <summary>
            Create an instance of Shape.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Shape.Content">
      <summary>
            Gets or sets the text of the annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Shape.ContentProperty">
      <summary>
            Identifies the Text dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Shape.ContentStyle">
      <summary>
            Gets or sets the label style of annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Shape.ContentStyleProperty">
      <summary>
            Identifies the ContentStyle dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Annotation.Square">
      <summary>
            Represents a square annotation for the <see cref="T:C1.WPF.Chart.Annotation.AnnotationLayer" /></summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Square.#ctor">
      <summary>
            Create an instance of Square.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Square.#ctor(System.String)">
      <summary>
            Create an instance of Square.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Square.#ctor(System.String,System.Int32)">
      <summary>
            Create an instance of Square.
            </summary>
      <param name="value">
      </param>
      <param name="length">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Square.Length">
      <summary>
            Gets or sets the length of the square annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Square.LengthProperty">
      <summary>
            Identifies the Length dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Template.#ctor">
      <summary>
            Create an instance of Template.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Template.AnnoTemplate">
      <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate" /> of annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Template.AnnoTemplateProperty">
      <summary>
            Identifies the AnnoTemplate dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Annotation.Text">
      <summary>
            Represents a text annotation for the <see cref="T:C1.WPF.Chart.Annotation.AnnotationLayer" /></summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Text.#ctor">
      <summary>
            Create an instance of Text.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Annotation.Text.#ctor(System.String)">
      <summary>
            Create an instance of Text.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.Annotation.Text.Content">
      <summary>
            Gets or sets the text of the annotation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Annotation.Text.ContentProperty">
      <summary>
            Identifies the Text dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.BoxWhisker">
      <summary>
            Represents a Box-whisker series of FlexChart.
            </summary>
      <remarks>
            The <see cref="T:C1.WPF.Chart.BoxWhisker" /> series is normally used to compare distributions between different sets of numerical data.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.BoxWhisker.ShowMeanLineProperty">
      <summary>
            Identifies the ShowMeanLine dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.BoxWhisker.ShowMeanLine">
      <summary>
            Gets or sets a value that determines whether to show the mean line for the Box-whisker series.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.BoxWhisker.QuartileCalculationProperty">
      <summary>
            Identifies the QuartileCalculation dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.BoxWhisker.QuartileCalculation">
      <summary>
            Gets or sets a value that specifies the quartile calculation for the Box-whisker series.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.BoxWhisker.ShowOutliersProperty">
      <summary>
            Identifies the ShowOutliers dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.BoxWhisker.ShowOutliers">
      <summary>
            Gets or sets a value that determines whether to show the outliers for the Box-whisker series.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.BoxWhisker.GapWidthProperty">
      <summary>
            Identifies the GapWidth dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.BoxWhisker.GapWidth">
      <summary>
            Gets or sets a value that determines the gap width as a percentage for the Box-Whisker series.
            </summary>
      <remarks>The default value for this property is 0.1. The min value is 0 and max value is 1.</remarks>
    </member>
    <member name="F:C1.WPF.Chart.BoxWhisker.GroupWidthProperty">
      <summary>
            Identifies the GroupWidth dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.BoxWhisker.GroupWidth">
      <summary>
            Gets or sets a value that determines the group width as a percentage for the Box-Whisker series.
            </summary>
      <remarks>The default value for this property is 0.8. The min value is 0 and max value is 1.</remarks>
    </member>
    <member name="F:C1.WPF.Chart.BoxWhisker.ShowMeanMarksProperty">
      <summary>
            Identifies the ShowMeanMarks dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.BoxWhisker.ShowMeanMarks">
      <summary>
            Gets or sets a value that determines whether to show the mean marker for the Box-whisker series.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.BoxWhisker.ShowInnerPointsProperty">
      <summary>
            Identifies the ShowInnerPoints dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.BoxWhisker.ShowInnerPoints">
      <summary>
            Gets or sets a value that determines whether to show the inner points for the Box-whisker series.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.ChartOptions">
      <summary>
            Represents chart options.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.ChartOptions.#ctor">
      <summary>
            Creates an instance of ChartOptions.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartOptions.InterpolateNulls">
      <summary>
      </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartOptions.InterpolateNullsProperty">
      <summary>
            Identifies the InterpolateNulls dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartOptions.ClusterSize">
      <summary>
            Gets or sets the cluster size.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartOptions.ClusterSizeProperty">
      <summary>
            Identifies the ClusterSize dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartOptions.BubbleMinSize">
      <summary>
            Gets or sets the minimal symbol size for bubble chart.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartOptions.BubbleMinSizeProperty">
      <summary>
            Identifies the BubbleMinSize dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartOptions.BubbleMaxSize">
      <summary>
            Gets or sets the maximum symbol size for bubble chart.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartOptions.BubbleMaxSizeProperty">
      <summary>
            Identifies the BubbleMaxSize dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartOptions.FunnelNeckWidth">
      <summary>
            Gets or sets the neck width as percentage for the Funnel chart.
            </summary>
      <remarks>NeckWidth doesn't work if <see cref="P:C1.WPF.Chart.ChartOptions.FunnelType" /> is set to <see cref="F:C1.Chart.FunnelChartType.Rectangle" /></remarks>
    </member>
    <member name="F:C1.WPF.Chart.ChartOptions.FunnelNeckWidthProperty">
      <summary>
            Identifies the FunnelNeckWidth dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartOptions.FunnelNeckHeight">
      <summary>
            Gets or sets the neck height as percentage for the Funnel chart.
            </summary>
      <remarks>NeckHeight doesn't work if <see cref="P:C1.WPF.Chart.ChartOptions.FunnelType" /> is set to <see cref="F:C1.Chart.FunnelChartType.Rectangle" /></remarks>
    </member>
    <member name="F:C1.WPF.Chart.ChartOptions.FunnelNeckHeightProperty">
      <summary>
            Identifies the FunnelNeckHeight dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartOptions.FunnelType">
      <summary>
            Gets or sets the type of Funnel chart.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartOptions.FunnelTypeProperty">
      <summary>
            Identifies the FunnelType dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.ChartStyle">
      <summary>
            Represents visual style of chart element.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartStyle.FontSize">
      <summary>
            Gets or sets the font size.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartStyle.FontSizeProperty">
      <summary>
            Identifies the FontSize dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartStyle.FontFamily">
      <summary>
            Gets or sets the font family.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartStyle.FontFamilyProperty">
      <summary>
            Identifies the FontFamily dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartStyle.FontStyle">
      <summary>
            Gets or sets the font style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartStyle.FontStyleProperty">
      <summary>
            Identifies the FontStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartStyle.FontStretch">
      <summary>
            Gets or sets the font stretch.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartStyle.FontStretchProperty">
      <summary>
            Identifies the FontStretch dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartStyle.FontWeight">
      <summary>
            Gets or sets the font weight.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartStyle.FontWeightProperty">
      <summary>
            Identifies the FontWeight dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartStyle.StrokeDashArray">
      <summary>
            Gets or sets the stroke dash array.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartStyle.StrokeDashArrayProperty">
      <summary>
            Identifies the StrokeDashArray dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartStyle.LinePattern">
      <summary>
            Gets or sets the Line Pattern.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartStyle.LinePatternProperty">
      <summary>
            Identifies the LinePattern dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartStyle.Stroke">
      <summary>
            Gets or sets the stroke brush.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartStyle.StrokeProperty">
      <summary>
            Identifies the Stroke dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartStyle.Fill">
      <summary>
            Gets or sets the fill brush.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartStyle.FillProperty">
      <summary>
            Identifies the Fill dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ChartStyle.StrokeThickness">
      <summary>
            Gets or sets the stroke thickness.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ChartStyle.StrokeThicknessProperty">
      <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.ChartStyle.#ctor">
      <summary>
            Creates an instance of ChartStyle class.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.DataLabelBase">
      <summary>
            Base class for chart data labels.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.DataLabelBase.#ctor">
      <summary>
            Creates an istance of DataLabelBase.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabelBase.Content">
      <summary>
            Gets or sets the content of data labels.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabelBase.Border">
      <summary>
            Gets or sets a value indicating whether the label has border.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabelBase.ConnectingLine">
      <summary>
            Gets or sets a value indicating whether the data labels have a line connecting them with corresponding data point. 
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabelBase.Offset">
      <summary>
            Gets or sets the offset of data label from corresponding data point.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabelBase.Style">
      <summary>
            Gets or sets the style of the label.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.DataLabelBase.StyleProperty">
      <summary>
            Identifies the Style dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabelBase.BorderStyle">
      <summary>
            Gets or sets the border style of the label.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.DataLabelBase.BorderStyleProperty">
      <summary>
            Identifies the BorderStyle dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.DataLabelBase.Invalidate">
      <summary>
            Invalidates the parent chart.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.DataLabel">
      <summary>
            Represents chart data label.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabel.Position">
      <summary>
            Gets or sets the position of data labels.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabel.Overlapping">
      <summary>
            Gets or sets the value which indicates how to handle overlapped data labels.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabel.OverlappingOptions">
      <summary>
            Gets or sets the label overlapping options.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabel.ContentOptions">
      <summary>
            Gets or sets the data label content options.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabel.Angle">
      <summary>
            Gets or sets the label rotation angle.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabel.MaxWidth">
      <summary>
            Gets or sets the maximum width of data label.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabel.MaxLines">
      <summary>
            Gets or sets the maximum number of lines in data label.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.DataLabel.MaxAutoLabels">
      <summary>
            Gets or sets the maximum number of labels for automatic positioning.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.PieDataLabel">
      <summary>
            Represents pie chart data label.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.PieDataLabel.Position">
      <summary>
            Gets or sets the position of data labels.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.PieDataLabel.Overlapping">
      <summary>
            Gets or sets the overlapping mode for data labels.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.ErrorBar">
      <summary>
            Represents an ErrorBar series of <see cref="!:FlexChart" /></summary>
      <remarks>
            The <see cref="T:C1.WPF.Chart.ErrorBar" /> series helps you see margins of error and standard deviations at a glance.
            They can be shown as a standard error amount, a percentage, or a standard deviation.
            You can also set your own values to display the exact error amounts you want.
            </remarks>
    </member>
    <member name="P:C1.WPF.Chart.ErrorBar.Direction">
      <summary>
            Gets or sets a value that specifies the direction of the error.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ErrorBar.DirectionProperty">
      <summary>
            Identifies the Direction dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ErrorBar.EndStyle">
      <summary>
            Gets or sets a value that specifies the end style of the series.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ErrorBar.EndStyleProperty">
      <summary>
            Identifies the EndStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ErrorBar.ErrorAmount">
      <summary>
            Gets or sets a value that specifies the error amount of the series.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ErrorBar.ErrorAmountProperty">
      <summary>
            Identifies the EndStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ErrorBar.CustomPlusErrorValue">
      <summary>
            Gets or sets a value that specifies the custom plus error value.
            </summary>
      <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.ErrorBar.CustomPlusErrorValueProperty">
      <summary>
            Identifies the CustomPlusErrorValue dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ErrorBar.CustomMinusErrorValue">
      <summary>
            Gets or sets a value that specifies the cumstom minus error value.
            </summary>
      <remarks>
            If ErrorAmount is ErrorAmount.Custom, the value will be used.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.ErrorBar.CustomMinusErrorValueProperty">
      <summary>
            Identifies the CustomMinusErrorValue dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ErrorBar.ErrorValue">
      <summary>
            Gets or sets a value that specifies the error value of the series.
            </summary>
      <remarks>
            This property should be work with errorAmount property.
            If errorAmount is ErrorAmount.FixedValue, the value property is a fixed number value.
            If errorAmount is ErrorAmount.Percentage, the value property is a percentage number value between 0 and 1.
            If errorAmount is ErrorAmount.StandardDeviation, the value property is a percentage number of calculated standard deviation value.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.ErrorBar.ErrorValueProperty">
      <summary>
            Identifies the ErrorValue dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.ErrorBar.ErrorBarStyle">
      <summary>
            Gets the style of the error bar.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ErrorBar.ErrorBarStyleProperty">
      <summary>
            Identifies the ErrorBarStyle dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.RenderEventArgs">
      <summary>
            Render event arguments.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderEventArgs.Width">
      <summary>
            Gets the control width.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderEventArgs.Height">
      <summary>
            Gets the control height.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.RenderSymbolEventArgs">
      <summary>
            Render symbol event arguments.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderSymbolEventArgs.Point">
      <summary>
            Gets the symbol position in control pixel coordinates.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderSymbolEventArgs.Index">
      <summary>
            Gets the data point index.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderSymbolEventArgs.Item">
      <summary>
            Gets the data item.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.FlexChartBase">
      <summary>
            Base class for FlexChart and FlexPie controls.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase._updating">
      <summary>
            Update count.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase._dataChanged">
      <summary>
            Data changed flag.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.FlexChartBase.#ctor">
      <summary>
            Creates an instance of FlexChart.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.Palette">
      <summary>
            Gets or sets the chart palette.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.PaletteProperty">
      <summary>
            Identifies the Palette dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.SelectionMode">
      <summary>
            Gets or sets the chart selection mode.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.SelectionModeProperty">
      <summary>
            Identifies the SelectionMode dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.SelectedIndex">
      <summary>
            Gets or sets the index of selected element.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.SelectedIndexProperty">
      <summary>
            Identifies the SelectedIndex dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.SelectionStyle">
      <summary>
            Gets or sets the style of selected element.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.SelectionStyleProperty">
      <summary>
            Identifies the SelectionStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.Binding">
      <summary>
            Gets or sets the name of the property that contains Y values for the series.
            </summary>
      <remarks>
            For complex chart types it may contain several names separated by commas.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.BindingProperty">
      <summary>
            Identifies the Binding dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.ItemsSource">
      <summary>
            Gets or sets the collection of objects that contains the series data.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.ItemsSourceProperty">
      <summary>
            Identifies the ItemsSource dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendToggle">
      <summary>
            Gets or sets a value indicating whether clicking legend items toggles
            the series visibility in the chart.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.LegendToggleProperty">
      <summary>
            Identifies the LegendToggle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.Header">
      <summary>
            Gets or sets the chart header text.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.HeaderProperty">
      <summary>
            Identifies the Header dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.Footer">
      <summary>
            Gets or sets the chart footer text.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.FooterProperty">
      <summary>
            Identifies the Footer dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.HeaderStyle">
      <summary>
            Gets or sets chart header style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.HeaderStyleProperty">
      <summary>
            Identifies the HeaderStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.PlotStyle">
      <summary>
            Gets or sets chart plot area style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.PlotStyleProperty">
      <summary>
            Identifies the PlotStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.HeaderAlignment">
      <summary>
            Gets or sets chart header alignment.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.HeaderAlignmentProperty">
      <summary>
            Identifies the HeaderAlignment dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.FooterStyle">
      <summary>
            Gets or sets chart footer style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.FooterStyleProperty">
      <summary>
            Identifies the FooterStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.FooterAlignment">
      <summary>
            Gets or sets chart footer alignment.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.FooterAlignmentProperty">
      <summary>
            Identifies the FooterAlignment dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendPosition">
      <summary>
            Gets or sets the chart legend position.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.LegendPositionProperty">
      <summary>
            Identifies the LegendPosition dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendStyle">
      <summary>
            Gets or sets the legend style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.LegendStyleProperty">
      <summary>
            Identifies the LegendStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendTitle">
      <summary>
            Gets or sets the legend title.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.LegendTitleProperty">
      <summary>
            Identifies the LegendTitle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendReversed">
      <summary>
            Gets or sets whether the legend is reversed.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.LegendReversedProperty">
      <summary>
            Identifies the LegendReversed dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendTitleStyle">
      <summary>
            Gets or sets the legend title style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.LegendTitleStyleProperty">
      <summary>
            Identifies the LegendTitleStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendGroupHeaderStyle">
      <summary>
            Gets or sets the legend title style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.LegendGroupHeaderStyleProperty">
      <summary>
            Identifies the LegendGroupStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendOrientation">
      <summary>
            Gets or sets the legend orientation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.LegendOrientationProperty">
      <summary>
            Identifies the LegendOrientation dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendTextWrapping">
      <summary>
            Gets or sets legend text wrap mode.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.LegendTextWrappingProperty">
      <summary>
            Identifies the LegendTextWrapping dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendMaxWidth">
      <summary>
            Gets or sets the legend item MaxWidth.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.LegendMaxWidthProperty">
      <summary>
            Identifies the LegendMaxWidth dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.ToolTipContent">
      <summary>
            Gets or sets the chart tooltip content.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.ToolTipContentProperty">
      <summary>
            Identifies the ToolTipContent dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.ToolTip">
      <summary>
            Gets or sets the chart tooltip.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.ToolTipProperty">
      <summary>
            Identifies the ToolTip dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.CustomPalette">
      <summary>
            Gets or sets the custom chart palette.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.CustomPaletteProperty">
      <summary>
            Identifies the CustomPalette dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendScrollBarStyle">
      <summary>
            Gets or sets the style of legend scroll bar.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.FlexChartBase.LegendScrollBarStyleProperty">
      <summary>
            Identifies the LegendScrollBarStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.FlexChartBase.LegendScrollBars">
      <summary>
            Gets or sets which scroll bars should appear in legend.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.FlexChartBase.Rendering">
      <summary>
            Fires before chart starts rendering.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.FlexChartBase.Rendered">
      <summary>
            Fires after chart finishes rendering.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.FlexChartBase.SelectionChanged">
      <summary>
            Fires after selected element was changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.FlexChartBase.BeginUpdate">
      <summary>
            Suspends notifications until the next call to EndUpdate.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.FlexChartBase.EndUpdate">
      <summary>
            Resumes notifications suspended by calls to BeginUpdate.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.FlexChartBase.PropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Fires when property changes.
            </summary>
      <param name="obj">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.FlexChartBase.DataPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Fires when data property changes.
            </summary>
      <param name="obj">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.FlexChartBase.Invalidate">
      <summary>
            Invalidates the chart.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.FlexChartBase.HitTest(System.Windows.Point)">
      <summary>
            Gets a HitTestInfo object with information about the specified point.
            </summary>
      <param name="pt">Point in control coordinates.</param>
      <returns>A HitTestInfo object with information about the point.</returns>
    </member>
    <member name="M:C1.WPF.Chart.FlexChartBase.OnSelectionChanged(System.EventArgs)">
      <summary>
            Called when selection was changed.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.FlexChartBase.GetContent(C1.Chart.HitTestInfo,System.String)">
      <summary>
            Gets the content by specified template.
            </summary>
      <param name="hti">
      </param>
      <param name="template">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Chart.C1FlexPie">
      <summary>
            The FlexPie control.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexPie.#ctor">
      <summary>
            Creates an instance of FlexChart.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexPie.BindingName">
      <summary>
            Gets or sets the name of the property that contains the name of the data item.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexPie.BindingNameProperty">
      <summary>
            Identifies the BindingName dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexPie.Reversed">
      <summary>
            Gets or sets a value that determines whether angles are reversed (counter-clockwise).
            </summary>
      <remarks>
            The default value is false, which causes angles to be measured in the clockwise direction.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexPie.ReversedProperty">
      <summary>
            Identifies the Reversed dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexPie.Offset">
      <summary>
            Gets or sets the offset of the slices from the pie center.
            </summary>
      <remarks>
            The offset is measured as a fraction of the pie radius.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexPie.OffsetProperty">
      <summary>
            Identifies the Offset dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexPie.InnerRadius">
      <summary>
            Gets or sets the size of the pie's inner radius.
            </summary>
      <remarks>
            The inner radius is measured as a fraction of the pie radius.
            The default value for this property is zero, which creates
            a pie. Setting this property to values greater than zero
            creates pies with a hole in the middle, also known as 
            doughnut charts.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexPie.InnerRadiusProperty">
      <summary>
            Identifies the InnerRadius dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexPie.StartAngle">
      <summary>
            Gets or sets the starting angle for the pie slices, in degrees.
            </summary>
      <remarks>
            Angles are measured clockwise, starting at the 9 o'clock position.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexPie.StartAngleProperty">
      <summary>
            Identifies the StartAngle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexPie.SelectedItemOffset">
      <summary>
            Gets or sets the offset of the selected slice from the pie center.
            </summary>
      <remarks>
            Offsets are measured as a fraction of the pie radius.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexPie.SelectedItemOffsetProperty">
      <summary>
            Identifies the SelectedItemOffset dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexPie.SelectedItemPosition">
      <summary>
            Gets or sets the position of the selected slice.
            </summary>
      <remarks>
            Setting this property to a value other than 'None' causes the pie to rotate when an item is selected.               
            Note that in order to select slices by clicking the chart, you must set the SelectionMode property to "Point".  
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexPie.SelectedItemPositionProperty">
      <summary>
            Identifies the SelectedItemPosition dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexPie.DataLabel">
      <summary>
            Gets or sets the data label.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexPie.HitTest(System.Windows.Point)">
      <summary>
            Gets a HitTestInfo object with information about the specified point.
            </summary>
      <param name="pt">Point in control coordinates.</param>
      <returns>A HitTestInfo object with information about the point.</returns>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexPie.OnApplyTemplate">
      <summary>
            Invoked when applying control template.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexPie.Invalidate">
      <summary>
            Invalidates the chart.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexPie.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Invoked during mouse down event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Chart.C1FlexPie.SliceRendering">
      <summary>
            Fires before rendering slice.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.C1FlexPie.SliceRendered">
      <summary>
            Fires after rendering slice.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.C1FlexPie.LabelRendering">
      <summary>
            Fires before rendering label.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.C1FlexPie.LabelRendered">
      <summary>
            Fires after rendering label.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexPie.SaveImage(System.IO.Stream,C1.WPF.Chart.ImageFormat,System.Int32,System.Int32,System.Nullable{System.Windows.Media.Color})">
      <summary>
            Saves chart as image with to the specified stream.
            </summary>
      <param name="stream">Stream</param>
      <param name="fmt">Image format.</param>
      <param name="w">Width of image.</param>
      <param name="h">Height of image</param>
      <param name="backColor">The background of image.</param>
    </member>
    <member name="T:C1.WPF.Chart.RenderSliceEventArgs">
      <summary>
            Represents render event argument class
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderSliceEventArgs.Index">
      <summary>
            Index of data point.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderSliceEventArgs.CenterX">
      <summary>
            Pie center X coordinate.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderSliceEventArgs.CenterY">
      <summary>
            Pie center Y coordinate.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderSliceEventArgs.Radius">
      <summary>
            Pie radius.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderSliceEventArgs.InnerRadius">
      <summary>
            Pie inner radius.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderSliceEventArgs.Angle">
      <summary>
            Slice angle.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderSliceEventArgs.Sweep">
      <summary>
            Slice sweep.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderPieDataLabelEventArgs.Text">
      <summary>
            Data label text. It can be changed in event handler.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.C1FlexRadar">
      <summary>
            Charting control for radar and polar charts.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexRadar.ChartType">
      <summary>
            Gets or sets chart type.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexRadar.ChartTypeProperty">
      <summary>
            Identifies the ChartType dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexRadar.StartAngle">
      <summary>
            Gets or set the starting angle.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexRadar.StartAngleProperty">
      <summary>
            Identifies the StartAngle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexRadar.Reversed">
      <summary>
            Gets or sets a value indicating direction of plotting.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexRadar.ReversedProperty">
      <summary>
            Identifies the Reversed dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Histogram">
      <summary>
            Represents a histogram.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="M:C1.WPF.Chart.Histogram.#ctor">
      <summary>
            Creates an instance of Histogram class.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Histogram.GetValues(System.Int32)">
      <summary>
            Gets the array of data values.
            </summary>
      <param name="dim">Dimension.</param>
      <returns>Array of data values.</returns>
    </member>
    <member name="M:C1.WPF.Chart.Histogram.GetChartType">
      <summary>
            Gets the chart type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.Chart.Histogram.BinWidth">
      <summary>
            Gets or sets a positive decimal number for the range of a bin.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Histogram.CumulativeMode">
      <summary>
            Gets or sets the cumulative mode state
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Histogram.CumulativeModeProperty">
      <summary>
            Identifies the cumulative mode dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Histogram.AppearanceType">
      <summary>
            Gets or sets the Appearance Type.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Histogram.HistogramAppearanceProperty">
      <summary>
            Identifies the AppearanceType dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Histogram.NormalCurve">
      <summary>
            Gets or sets the NormalCurve property.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Histogram.NormalCurveProperty">
      <summary>
            Identifies the NormalCurve dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Histogram.FrequencyPolygonStyle">
      <summary>
            Gets or sets the FrequencyPolygonStyle property.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Histogram.FrequencyPolygonStyleProperty">
      <summary>
            Identifies the FrequencyPolygonStyle dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.NormalCurve">
      <summary>
            Represents a histogram Normal Curve. 
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.NormalCurve.Visible">
      <summary>
            Gets or sets the visible of Normal Curve
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.NormalCurve.VisibleProperty">
      <summary>
            Identifies the Visible dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.NormalCurve.LineStyle">
      <summary>
            Gets or sets the LineStyle property.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.NormalCurve.LineStyleProperty">
      <summary>
            Identifies the LineStyle dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.IChartLayer">
      <summary>
            Defines chart layer interface.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.IChartLayer.Chart">
      <summary>
            Gets or sets the parent chart.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Interaction.GestureMode">
      <summary>
            Specifies available values for gesture direction.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.GestureMode.None">
      <summary>
            Has no effect.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.GestureMode.X">
      <summary>
            Causes behavior along x- axis.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.GestureMode.Y">
      <summary>
            Causes behavior along y- axis.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.GestureMode.XY">
      <summary>
            Causes behavior along both x- and y- axes.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Interaction.IBehavior">
      <summary>
            Represents the behaviors that interact with users.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.IBehavior.Chart">
      <summary>
            Associated chart.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Interaction.IBehavior.OnAttach">
      <summary>
            Called after the behavior is attached to an associated chart.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Interaction.IBehavior.OnDetach">
      <summary>
            Called after the behavior is detached to an associated chart.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Interaction.ZoomBehavior">
      <summary>
            Represents zoom behavior.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.ZoomBehavior.ZoomMode">
      <summary>
            Gets or sets the gesture direction of zoom behavior.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.ZoomBehavior.ZoomModeProperty">
      <summary>
            Identifies the ZoomMode dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Interaction.TranslateBehavior">
      <summary>
            Represents translation behavior.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.TranslateBehavior.TranslationMode">
      <summary>
            Gets or sets the gesture direction of translate behavior.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.TranslateBehavior.TranslationModeProperty">
      <summary>
            Identifies the TranslationMode dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Interaction.C1AxisScrollbar">
      <summary>
            Represents a FlexChart range slider control supporting additional visual styles.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Interaction.C1AxisScrollbar.#ctor">
      <summary>
            Create an instance of AxisScrollbar.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1AxisScrollbar.ScrollButtonsVisible">
      <summary>
            Gets or sets the decrease button and increase button is visible or not.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1AxisScrollbar.ScrollButtonsVisibleProperty">
      <summary>
            Identifies the ScrollButtonVisible dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1AxisScrollbar.SelectedAreaBrush">
      <summary>
            Gets or sets the brush of selected area.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1AxisScrollbar.SelectedAreaBrushProperty">
      <summary>
            Identifies the SelectedAreaBrush dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Interaction.C1AxisScrollbar.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Chart.Interaction.C1AxisScrollbar" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="T:C1.WPF.Chart.Interaction.LineMarkerInteraction">
      <summary>
            Specifies how the LineMarker interacts with the user.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerInteraction.None">
      <summary>
            No interaction, the user specifies the position by clicking.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerInteraction.Move">
      <summary>
            The LineMarker moves with the pointer.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerInteraction.Drag">
      <summary>
            The LineMarker moves when the user drags the line.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Interaction.LineMarkerLines">
      <summary>
            Specifies the line type for the LineMarker.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerLines.None">
      <summary>
            Show no line.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerLines.Vertical">
      <summary>
            Show a vertical line.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerLines.Horizontal">
      <summary>
            Show a horizontal line.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerLines.Both">
      <summary>
            Show both vertical and horizontal lines.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Interaction.LineMarkerAlignment">
      <summary>
            Specifies the alignment of the LineMarker.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerAlignment.Auto">
      <summary>
            The LineMarker alignment adjusts automatically so that it stays inside the boundaries of the plot area.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerAlignment.Bottom">
      <summary>
            The LineMarker aligns to the bottom of the pointer.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerAlignment.Left">
      <summary>
            The LineMarker aligns to the left of the pointer.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerAlignment.Right">
      <summary>
            The LineMarker aligns to the right of the pointer.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.LineMarkerAlignment.Top">
      <summary>
            The LineMarker aligns to the top of the pointer.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Interaction.PositionChangedArgs">
      <summary>
            Represents the arguments of PositionChanged event.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Interaction.PositionChangedArgs.#ctor(System.Windows.Point)">
      <summary>
            Create an instance of PositionChangedArgs.
            </summary>
      <param name="pt">
      </param>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.PositionChangedArgs.Position">
      <summary>
            Gets the target point at which to show the LineMarker.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Interaction.C1LineMarker">
      <summary>
            Represents an extension of the LineMarker for the FlexChart.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Interaction.C1LineMarker.#ctor">
      <summary>
            Creates an instance of LineMarker.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1LineMarker.X">
      <summary>
            Gets the current x-value as chart data coordinates.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1LineMarker.Y">
      <summary>
            Gets the current y-value as chart data coordinates.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1LineMarker.Alignment">
      <summary>
            Gets or sets the alignment of the LineMarker content.
            </summary>
      <remarks> By default, the LineMarker shows to the right, at the bottom of the target point. Use "|" to combine alignment values.</remarks>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1LineMarker.AlignmentProperty">
      <summary>
            Identifies the Alignment dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1LineMarker.Content">
      <summary>
            Gets or sets the content function that allows you to customize the text content of the LineMarker.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1LineMarker.ContentProperty">
      <summary>
            Identifies the Content dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1LineMarker.DragContent">
      <summary>
            Gets or sets a value indicating whether the content of the marker is draggable when the interaction mode is "Drag".
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1LineMarker.DragContentProperty">
      <summary>
            Identifies the DragContent dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1LineMarker.DragLines">
      <summary>
            Gets or sets a value indicating whether the lines are linked when the horizontal or vertical line is dragged when the interaction mode is "Drag".
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1LineMarker.DragLinesProperty">
      <summary>
            Identifies the DragLines dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1LineMarker.DragThreshold">
      <summary>
            Gets or sets the maximum distance from the horizontal or vertical line that the marker can be dragged.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1LineMarker.DragThresholdProperty">
      <summary>
            Identifies the DragThreshold dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1LineMarker.Interaction">
      <summary>
            Gets or sets the interaction mode of the LineMarker.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1LineMarker.InteractionProperty">
      <summary>
            Identifies the Interaction dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1LineMarker.Lines">
      <summary>
            Gets or sets the visibility of the LineMarker lines.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1LineMarker.LinesProperty">
      <summary>
            Identifies the Lines dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1LineMarker.HorizontalPosition">
      <summary>
            Gets or sets the position of horizontal line.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1LineMarker.HorizontalPositionProperty">
      <summary>
            Identifies the HorizontalPosition dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1LineMarker.VerticalPosition">
      <summary>
            Gets or set the position of vertical line.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1LineMarker.VerticalPositionProperty">
      <summary>
            Identifies the VerticalPosition dependency property.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.Interaction.C1LineMarker.PositionChanged">
      <summary>
            Occurs after the LineMarker's position changes.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Interaction.C1LineMarker.OnPositionChanged(System.Boolean)">
      <summary>
            Raise the PositionChanged event.
            </summary>
      <param name="reset">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.Interaction.C1LineMarker.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.Chart.Interaction.C1LineMarker" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="T:C1.WPF.Chart.Interaction.C1RangeSelector">
      <summary>
            Represents a FlexChart range slider control supporting additional visual styles.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Interaction.C1RangeSelector.#ctor">
      <summary>
            Create an instance of RangeSelector.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Interaction.C1RangeSelector.SelectedAreaBrush">
      <summary>
            Gets or sets the brush of selected area.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Interaction.C1RangeSelector.SelectedAreaBrushProperty">
      <summary>
            Identifies the SelectedAreaBrush Dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.PlotArea">
      <summary>
            Represents plot area in FlexChart.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.PlotArea.Row">
      <summary>
            Gets or sets the row index of plot area.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.PlotArea.RowProperty">
      <summary>
            Identifies the Row dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.PlotArea.Column">
      <summary>
            Gets or sets the column index of the plot area.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.PlotArea.ColumnProperty">
      <summary>
            Identifies the Row dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.PlotArea.PlotAreaName">
      <summary>
            Gets or sets the plot area name.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.PlotArea.PlotAreaNameProperty">
      <summary>
            Identifies the PlotAreaName dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.PlotArea.Width">
      <summary>
            Gets or sets the width of the plot area.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.PlotArea.WidthProperty">
      <summary>
            Identifies the Width dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.PlotArea.Height">
      <summary>
            Gets or sets the Height of the plot area.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.PlotArea.HeightProperty">
      <summary>
            Identifies the Height dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.RadarSeries">
      <summary>
            Represents series in FlexRadar control.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RadarSeries.ChartType">
      <summary>
            Gets or sets the chart type.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.RadarSeries.GetChartType">
      <summary>
            Gets the chart type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Chart.RangedHistogram">
      <summary>
            Represents a histogram.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="M:C1.WPF.Chart.RangedHistogram.#ctor">
      <summary>
            Creates an instance of Histogram class.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.RangedHistogram.GetValues(System.Int32)">
      <summary>
            Gets the array of data values.
            </summary>
      <param name="dim">Dimension.</param>
      <returns>Array of data values.</returns>
    </member>
    <member name="P:C1.WPF.Chart.RangedHistogram.BinMode">
      <summary>
            Gets or sets the _mode of histogram bin.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RangedHistogram.BinWidth">
      <summary>
            Gets or sets a positive decimal number for the range of a bin.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RangedHistogram.OverflowBin">
      <summary>
            Gets or sets a value to create a bin for all values above it.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RangedHistogram.UnderflowBin">
      <summary>
            Gets or sets a value to create a bin for all values below or equal to it.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RangedHistogram.NumberOfBins">
      <summary>
            Gets or sets the number of bins for the histogram, including the overflow and underflow bins.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RangedHistogram.ShowOverflowBin">
      <summary>
            Gets or sets whether the histogram shows the overflow bin.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RangedHistogram.ShowUnderflowBin">
      <summary>
            Gets or sets whether the histogram shows the underflow bin.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RangedHistogram.SortDescending">
      <summary>
            Gets or sets whether the ranged histogram sort descending.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.RenderCanvas">
      <summary>
            Chart rendering canvas.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.RenderCanvas.#ctor">
      <summary>
            Creates an instance of RenderCanvas.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.RenderCanvas.ArrangeOverride(System.Windows.Size)">
      <summary>
            Arranges the content of canvas.
            </summary>
      <param name="arrangeSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Chart.PieCanvas">
      <summary>
            Pie chart canvas.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.PieCanvas.ArrangeOverride(System.Windows.Size)">
      <summary>
            Arranges the content of canvas.
            </summary>
      <param name="arrangeSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Chart.RenderCanvasBase">
      <summary>
            Pie chart canvas.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.RenderCanvasBase.ArrangeOverride(System.Windows.Size)">
      <summary>
            Arranges the content of canvas.
            </summary>
      <param name="arrangeSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Chart.Series">
      <summary>
            Represents data series.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Series.GetValues(System.Int32)">
      <summary>
            Gets the point data array for the specified coordinate dimension.
            </summary>
      <param name="dim">Specifies the dimension of data to retrieve (0=Y data, 1=X data, 2=Y1 data, ...)</param>
      <returns>The point data array for the specified coordinate dimension</returns>
    </member>
    <member name="M:C1.WPF.Chart.Series.Invalidate">
      <summary>
            Invalidates the chart.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.ActualBinding">
      <summary>
            Gets the actual binding.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.ActualBindingX">
      <summary>
            Gets the actual x-binding.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.ActualItemsSource">
      <summary>
            Gets the actual items source.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.ActualChart">
      <summary>
            Gets the chart.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.MemberPaths">
      <summary>
            Gets the array of member bindings for the series.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.BindingX">
      <summary>
            Gets or sets the name of the property that contains X values for the series.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.BindingXProperty">
      <summary>
            Identifies the BindingX dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.Binding">
      <summary>
            Gets or sets the name of the property that contains Y values for the series.
            </summary>
      <remarks>
            For complex chart types it may contain several names separated by commas.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.Series.BindingProperty">
      <summary>
            Identifies the Binding dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.ItemsSource">
      <summary>
            Gets or sets the collection of objects that contains the series data.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.ItemsSourceProperty">
      <summary>
            Identifies the ItemsSource dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.Style">
      <summary>
            Gets or sets the series style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.StyleProperty">
      <summary>
            Identifies the Style dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.AltStyle">
      <summary>
            Gets or sets the alternative series style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.AltStyleProperty">
      <summary>
            Identifies the AltStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.SymbolStyle">
      <summary>
            Gets or sets the series symbol style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.SymbolStyleProperty">
      <summary>
            Identifies the SymbolStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.DataLabel">
      <summary>
            Gets or sets the series data label.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.DataLabelProperty">
      <summary>
            Identifies the DataLabel dependency property.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.Series.SymbolRendering">
      <summary>
            Fires before rendering symbol.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.Series.SymbolRendered">
      <summary>
            Fires after rendering symbol.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.ChartType">
      <summary>
            Gets or sets the series chart type.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.ChartTypeProperty">
      <summary>
            Identifies the ChartType dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.Visibility">
      <summary>
            Gets or sets the series visibility.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.VisibilityProperty">
      <summary>
            Identifies the Visibility dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.SymbolMarker">
      <summary>
            Gets or sets the shape of marker to use for each data point in the series.
            Applies to Scatter, LineSymbols, and SplineSymbols chart types.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.SymbolMarkerProperty">
      <summary>
            Identifies the SymbolMarker dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.SymbolSize">
      <summary>
            Gets or sets the size(in pixels) of the symbols used to render this Series.
            Applies to Scatter, LineSymbols, and SplineSymbols chart types.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.SymbolSizeProperty">
      <summary>
            Identifies the SymbolSize dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.SeriesName">
      <summary>
            Gets or sets the series display name.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.AxisX">
      <summary>
            Gets or sets the series x-axis.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.AxisY">
      <summary>
            Gets or sets the series y-axis.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.StackingGroup">
      <summary>
            Gets or sets the group index for series, only effect in bar and column chart type.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.StackingGroupProperty">
      <summary>
            Identifies the StackingGroup property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.LegendGroup">
      <summary>
            Gets or sets the name of the legend group for the series.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.LegendGroupProperty">
      <summary>
            Identifies the LegendGroup property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Series.Tooltip">
      <summary>
            Gets or sets the tooltip template string for the series.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Series.TooltipProperty">
      <summary>
            Identifies the Tooltip property.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Series.ToString">
      <summary>
            Returns the string that represents the current series.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Chart.Series.OnRendering(C1.Chart.IRenderEngine)">
      <summary>
            Called when series is rendering.
            </summary>
      <param name="engine">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Chart.Series.OnRendered(C1.Chart.IRenderEngine)">
      <summary>
            Called after series was rendered.
            </summary>
      <param name="engine">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.Series.OnItemsSourceChanged">
      <summary>
            Invoked when items source changes.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Series.Dispose">
      <summary>
            Disposes resources.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.SeriesEventArgs">
      <summary>
            Provides arguments for series-related event.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.SeriesEventArgs.Series">
      <summary>
            Gets the chart series.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.C1Sunburst">
      <summary>
            Sunburst chart control.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1Sunburst.DrilldownProperty">
      <summary>
            Identifies the ChildItemsPath dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1Sunburst.ChildItemsPath">
      <summary>
            Gets or sets the name of the property (or properties) used to generate child items in hierarchical data.
            Set this property to a string to specify the name of the property that contains an item's child items (e.g. <code>Items</code>).
            If items at different levels child items with different names, then set this property to an array containing the names of the properties.
            that contains child items at each level.
            (e.g. <code>"accounts,checks,earnings"</code>)
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1Sunburst.ChildItemsPathProperty">
      <summary>
            Identifies the ChildItemsPath dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.C1TreeMap">
      <summary>
            The TreeMap control.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1TreeMap.#ctor">
      <summary>
            Creates an instance of C1TreeMap.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1TreeMap.BindingName">
      <summary>
            Gets or sets the name of the property that contains the name of the data item.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1TreeMap.BindingNameProperty">
      <summary>
            Identifies the BindingName dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1TreeMap.ChartType">
      <summary>
            Gets or sets the tree map type.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1TreeMap.ChartTypeProperty">
      <summary>
            Identifies the ChartType dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1TreeMap.ChildItemsPath">
      <summary>
            Gets or sets the name of the property of collection that contains child items.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1TreeMap.ChildItemsPathProperty">
      <summary>
            Identifies the ChildItemsPath dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1TreeMap.MaxDepth">
      <summary>
            Gets or sets the maximum number of displayed node levels.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1TreeMap.MaxDepthProperty">
      <summary>
            Identifies the MaxDepth dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1TreeMap.SelectedItem">
      <summary>
            Gets or sets the selected data item.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1TreeMap.SelectedItemProperty">
      <summary>
            Identifies the SelectedItem dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1TreeMap.DataLabel">
      <summary>
            Gets or sets the data label.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.C1TreeMap.NodeRendering">
      <summary>
            Fires before rendering node.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.C1TreeMap.NodeRendered">
      <summary>
            Fires after rendering node.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1TreeMap.HitTest(System.Windows.Point)">
      <summary>
            Gets a HitTestInfo object with information about the specified point.
            </summary>
      <param name="pt">Point in control coordinates.</param>
      <returns>A HitTestInfo object with information about the point.</returns>
    </member>
    <member name="M:C1.WPF.Chart.C1TreeMap.OnApplyTemplate">
      <summary>
            Invoked when applying control template.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1TreeMap.Invalidate">
      <summary>
            Invalidates the chart.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1TreeMap.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Invoked during mouse down event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.C1TreeMap.SaveImage(System.IO.Stream,C1.WPF.Chart.ImageFormat,System.Int32,System.Int32,System.Nullable{System.Windows.Media.Color})">
      <summary>
            Saves chart as image with to the specified stream.
            </summary>
      <param name="stream">Stream</param>
      <param name="fmt">Image format.</param>
      <param name="w">Width of image.</param>
      <param name="h">Height of image</param>
      <param name="backColor">The background of image.</param>
    </member>
    <member name="T:C1.WPF.Chart.RenderNodeEventArgs">
      <summary>
            Render node event arguments.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderNodeEventArgs.X">
      <summary>
            Gets the top let x-coordinate of the node rectangle.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderNodeEventArgs.Y">
      <summary>
            Gets the top let y-coordinate of the node rectangle.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderNodeEventArgs.Width">
      <summary>
            Gets the width of the node rectangle.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderNodeEventArgs.Height">
      <summary>
            Gets the height of the node rectangle.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderNodeEventArgs.Item">
      <summary>
            Gets the data item of the node.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderNodeEventArgs.Depth">
      <summary>
            Gets the depth of the node
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderNodeEventArgs.IsTitle">
      <summary>
            Gets if the node is a Title node or not
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.TrendLine">
      <summary>
            Represents a trend line for FlexChart and FinancialChart.
            </summary>
      <remarks>
            A trendline is a line superimposed on a chart revealing the overall direction
            of data.
            You may define a different fit type for each @see:TrendLine object that you 
            add to the @see:FlexChart series collection by setting the fitType property.
            </remarks>
    </member>
    <member name="M:C1.WPF.Chart.TrendLine.#ctor">
      <summary>
            Creates an instance of TrendLine class.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.TrendLine.FitType">
      <summary>
            Gets or sets the fit type of trend line.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.TrendLine.FitTypeProperty">
      <summary>
            Identifies the FitType dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.TrendLine.Order">
      <summary>
            Gets or sets the order of trend line. The order defines number of
            terms in polynom equation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.TrendLine.OrderProperty">
      <summary>
            Identifies the Order dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.TrendLine.SampleCount">
      <summary>
            Gets or sets the sample count for function calculation.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.TrendLine.SampleCountProperty">
      <summary>
            Identifies the SampleCount dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.TrendLine.MinX">
      <summary>
            Gets or sets the minimal x-value.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.TrendLine.MinXProperty">
      <summary>
            Identifies the MinX dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.TrendLine.MaxX">
      <summary>
            Gets or sets the maximal x-value.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.TrendLine.MaxXProperty">
      <summary>
            Identifies the MaxX dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.TrendLine.Coefficients">
      <summary>
            Gets the coefficients of equation.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.TrendLine.GetValues(System.Int32)">
      <summary>
            Gets the array of data values.
            </summary>
      <param name="dim">Dimension.</param>
      <returns>Array of data values.</returns>
    </member>
    <member name="T:C1.WPF.Chart.Waterfall">
      <summary>
            Represents a Waterfall series for FlexChart.
            </summary>
      <remarks>
            The <see cref="T:C1.WPF.Chart.Waterfall" /> series is normally used to demonstrate 
            how the starting position either increases or decreases through a series of changes.
            </remarks>
    </member>
    <member name="M:C1.WPF.Chart.Waterfall.#ctor">
      <summary>
            Create an instance of Waterfall.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.ConnectorLines">
      <summary>
            Gets or sets a value that determines whether to show connector lines.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.ConnectorLinesProperty">
      <summary>
            Identifies the ConnectorLines dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.IntermediateTotalLabels">
      <summary>
            Gets or sets the value of the property that contains the label of the intermediate total bar, it should be an array or a string.
            </summary>
      <remarks>
            The property should work with <see cref="P:C1.WPF.Chart.Waterfall.ShowIntermediateTotal" /> and <see cref="P:C1.WPF.Chart.Waterfall.IntermediateTotalPositions" /> properties.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.IntermediateTotalLabelsProperty">
      <summary>
            Identifies the IntermediateTotalLabels dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.IntermediateTotalPositions">
      <summary>
            Gets or sets the value of the property that contains the index for positions of the intermediate total bar.
            </summary>
      <remarks>
            The property should work with <see cref="P:C1.WPF.Chart.Waterfall.ShowIntermediateTotal" /> and <see cref="P:C1.WPF.Chart.Waterfall.IntermediateTotalLabels" /> properties.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.IntermediateTotalPositionsProperty">
      <summary>
            Identifies the IntermediateTotalPositions dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.RelativeData">
      <summary>
            Gets or sets a value that determines whether the given data is relative.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.RelativeDataProperty">
      <summary>
            Identifies the RelativeData dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.ShowIntermediateTotal">
      <summary>
            Gets or sets a value that determines whether to show the intermediate total bar.
            </summary>
      <remarks>
            The property should work with <see cref="P:C1.WPF.Chart.Waterfall.IntermediateTotalLabels" /> and <see cref="P:C1.WPF.Chart.Waterfall.IntermediateTotalPositions" /> properties.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.ShowIntermediateTotalProperty">
      <summary>
            Identifies the ShowIntermediateTotal dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.ShowTotal">
      <summary>
            Gets or sets a value that determines whether show total bar.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.ShowTotalProperty">
      <summary>
            Identifies the ShowTotal dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.Start">
      <summary>
            Gets or sets a value that determines the value of the start bar.
            If start is null, start bar will not show.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.StartProperty">
      <summary>
            Identifies the Start dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.StartLabel">
      <summary>
            Gets or sets the label of the start bar.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.StartLabelProperty">
      <summary>
            Identifies the StartLabel dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.TotalLabel">
      <summary>
            Gets or sets the label of the total bar.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.TotalLabelProperty">
      <summary>
            Identifies the TotalLabel dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.StartStyle">
      <summary>
            Gets or sets the StartStyle property.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.StartStyleProperty">
      <summary>
            Identifies the StartStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.TotalStyle">
      <summary>
            Gets or sets the TotalStyle property.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.TotalStyleProperty">
      <summary>
            Identifies the TotalStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.FallingStyle">
      <summary>
            Gets or sets the FallingStyle property.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.FallingStyleProperty">
      <summary>
            Identifies the FallingStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.RisingStyle">
      <summary>
            Gets or sets the RisingStyle property.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.RisingStyleProperty">
      <summary>
            Identifies the RisingStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.IntermediateTotalStyle">
      <summary>
            Gets or sets the IntermediateTotalStyle property.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.IntermediateTotalStyleProperty">
      <summary>
            Identifies the IntermediateTotalStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Waterfall.ConnectorLineStyle">
      <summary>
            Gets or sets the ConnectorLineStyle property.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Waterfall.ConnectorLineStyleProperty">
      <summary>
            Identifies the ConnectorLineStyle dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Resources.C1_WPF_FlexChart">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Resources.C1_WPF_FlexChart.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.Axis">
      <summary>
            Represents an axis in the chart.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Axis.#ctor">
      <summary>
            Creates an instance of Axis class.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.Title">
      <summary>
            Gets or sets the axis title.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.TitleProperty">
      <summary>
            Identifies the Title dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.Labels">
      <summary>
            Gets or sets a value indicating whether to show axis labels.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.LabelsProperty">
      <summary>
            Backing field for Labels property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.Position">
      <summary>
            Gets or sets the axis position.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.PositionProperty">
      <summary>
            Backing field for Position property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.Origin">
      <summary>
            Gets or sets the axis origin.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.OriginProperty">
      <summary>
            Backing field for Origin property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.Reversed">
      <summary>
            Gets or sets a value indicating whether the axis is reversed.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.ReversedProperty">
      <summary>
            Backing field for Reversed property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.LabelAngle">
      <summary>
            Gets or sets the angle of rotation for axis labels. 
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.LabelAngleProperty">
      <summary>
            Backing field for LabelAngle property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.LabelMin">
      <summary>
            Gets or sets whether the minimum axis value is always labeled.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.LabelMinProperty">
      <summary>
            Backing field for LabelMin property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.LabelMax">
      <summary>
            Gets or sets whether the maximum axis value is always labeled.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.LabelMaxProperty">
      <summary>
            Backing field for LabelMax property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.Format">
      <summary>
            Gets or set formatting string for axis labels.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.FormatProperty">
      <summary>
            Backing field for Format property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.MajorTickMarks">
      <summary>
            Gets or sets a value indicating the appearance of major tick marks.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.MajorTickMarksProperty">
      <summary>
            Backing field for MajorTickMarks property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.MajorGrid">
      <summary>
            Gets or set a value indicating whether to draw major grid.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.MajorGridProperty">
      <summary>
            Backing field for MajorGrid property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.MajorUnit">
      <summary>
            Gets or sets the distance betweem axis labels.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.MajorUnitProperty">
      <summary>
            Backing field for MajorUnit property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.MinorTickMarks">
      <summary>
            Gets or sets a value indicating the appearance of minor tick marks.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.MinorTickMarksProperty">
      <summary>
            Backing field for MinorTickMarks property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.MinorGrid">
      <summary>
            Gets or set a value indicating whether to draw minor grid.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.MinorGridProperty">
      <summary>
            Backing field for MinorGrid property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.MinorUnit">
      <summary>
            Gets or sets the distance between minor ticks and grid lines.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.MinorUnitProperty">
      <summary>
            Backing field for MinorUnit property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.AxisLine">
      <summary>
            Gets or sets a value indicating whether to draw axis line.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.AxisLineProperty">
      <summary>
            Backing field for AxisLine property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.Min">
      <summary>
            Gets or sets the axis minimum.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.MinProperty">
      <summary>
            Backing field for Min property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.Max">
      <summary>
            Gets or sets the axis maximum. 
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.MaxProperty">
      <summary>
            Backing field for Max property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.LogBase">
      <summary>
            Gets or sets the base for logarithmic axis.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.LogBaseProperty">
      <summary>
            Backing field for the LogBase property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.LabelAlignment">
      <summary>
            Gets or sets the axis labels alignment.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.LabelAlignmentProperty">
      <summary>
            Backing field for the LabelAlignment property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.Style">
      <summary>
            Gets or sets the axis style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.StyleProperty">
      <summary>
            Identifies the Style dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.GroupStyle">
      <summary>
            Gets or sets the axis group style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.GroupStyleProperty">
      <summary>
            Identifies the Style dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.TitleStyle">
      <summary>
            Gets or sets the axis title style.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.TitleStyleProperty">
      <summary>
            Identifies the TitleStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.MajorGridStyle">
      <summary>
            Gets or sets the style of axis major grid.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.MajorGridStyleProperty">
      <summary>
            Identifies the MajorGridStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.MinorGridStyle">
      <summary>
            Gets or sets the style of axis minor grid.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.MinorGridStyleProperty">
      <summary>
            Identifies the MajorGridStyle dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.OverlappingLabels">
      <summary>
            Gets or sets a value indicating how to handle the overlapping axis labels.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.OverlappingLabelsProperty">
      <summary>
            Identifies the OverlappingLabels dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.Scrollbar">
      <summary>
            Gets or sets the axis scroll bar.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.ScrollbarProperty">
      <summary>
            Identifies the Scrollbar dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.ItemsSource">
      <summary>
            Gets or sets the items source for the axis labels.
            </summary>
      <remarks>
            Names of the properties are specified by the Binding property.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.Axis.ItemsSourceProperty">
      <summary>
            Identifies the ItemsSource dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.Binding">
      <summary>
            Gets or sets the comma-separated property names for the DataSource property to use in axis labels.
            </summary>
      <remarks>
            The first name specifies the value on the axis, the second represents the corresponding
            axis label.The default value is "Value,Text".
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.Axis.BindingProperty">
      <summary>
            Identifies the Binding dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.PlotAreaName">
      <summary>
            Gets or sets the plot area name for the axis.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.PlotAreaNameProperty">
      <summary>
            Identifies the PlotAreaName dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.StaggeredLines">
      <summary>
            Gets or sets the number of staggered lines for axis labels.
            </summary>
      <remarks>
            The default value is 1 and all axis labels are drawn on the same level.
            </remarks>
    </member>
    <member name="F:C1.WPF.Chart.Axis.StaggeredLinesProperty">
      <summary>
            Identifies the StaggeredLines dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.TimeUnit">
      <summary>
            Gets or sets the units for a time based axis.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.TimeUnitProperty">
      <summary>
            Backing field for TimeUnit property.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.Axis.Convert(System.Double)">
      <summary>
            Converts the specified value from data to pixel coordinate.
            </summary>
      <param name="val">The data value to convert.</param>
      <returns>The corresponding value in control pixel coordinate.</returns>
    </member>
    <member name="M:C1.WPF.Chart.Axis.ConvertBack(System.Double)">
      <summary>
            Converts the specified value from control pixel to data coordinate.
            </summary>
      <param name="val">The value in control pixel coordinate.</param>
      <returns>The corresponding data value.</returns>
    </member>
    <member name="P:C1.WPF.Chart.Axis.AxisType">
      <summary>
            Gets the axis type.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.GroupNames">
      <summary>
            Gets or sets the group names
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.GroupNamesProperty">
      <summary>
            Backing field for GroupNames property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.GroupItemsPath">
      <summary>
            Gets or sets the group names
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.GroupItemsPathProperty">
      <summary>
            Backing field for GroupItemsPath property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.GroupSeparator">
      <summary>
            Gets or sets the group separator
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.GroupSeparatorProperty">
      <summary>
            Backing field for GroupSeparator property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.GroupProvider">
      <summary>
            Gets or sets the group provider
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.GroupProviderProperty">
      <summary>
            Backing field for GroupProvider property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.GroupTitleAlignment">
      <summary>
            Gets or sets the alignment of the group title.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.GroupTitleAlignmentProperty">
      <summary>
            Backing field for GroupTitleAlignment property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.GroupVisibilityLevel">
      <summary>
            Gets or sets the limiting level of visible collapsible groups.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.GroupVisibilityLevelProperty">
      <summary>
            Backing field for GroupVisibilityLevel property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.Axis.ChartType">
      <summary>
            Gets or sets the ChartType.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.Axis.ChartTypeProperty">
      <summary>
            Backing field for ChartType property.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.C1FlexChart">
      <summary>
            FlexChart control.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexChart.#ctor">
      <summary>
            Creates an instance of FlexChart.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexChart.OnApplyTemplate">
      <summary>
            Invoked when applying control template.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.ChartType">
      <summary>
            Gets or sets the chart type.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexChart.ChartTypeProperty">
      <summary>
            Identifies the ChartType dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.Stacking">
      <summary>
            Gets or sets the chart stacking.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexChart.StackingProperty">
      <summary>
            Identifies the Stacking dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.Rotated">
      <summary>
            Gets or sets a value indicating whether the chart is rotated.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexChart.RotatedProperty">
      <summary>
            Identifies the Rotated dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.RenderMode">
      <summary>
            Gets or sets the render mode.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexChart.RenderModeProperty">
      <summary>
            Identifies the RenderMode dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.BindingX">
      <summary>
            Gets or sets the name of the property that contains X values for the series.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexChart.BindingXProperty">
      <summary>
            Identifies the BindingX dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.PlotMargin">
      <summary>
            Gets or sets the plot area margin.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexChart.PlotMarginProperty">
      <summary>
            Identifies the PlotMargin dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.AxisX">
      <summary>
            Gets or sets the main chart x-axis.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.AxisY">
      <summary>
            Gets or sets the main chart y-axis.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.Options">
      <summary>
            Gets or sets the chart options.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexChart.OptionsProperty">
      <summary>
            Identifies the Options dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.Series">
      <summary>
            Gets the series collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.Behaviors">
      <summary>
            Gets the behaviors collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.Layers">
      <summary>
            Gets the chart layers collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.PlotAreas">
      <summary>
            Gets the chart plot areas collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.SelectedSeries">
      <summary>
            Gets or sets the selected series.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.C1FlexChart.SelectedSeriesProperty">
      <summary>
            Identifies the SelectedSeries dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.DataLabel">
      <summary>
            Gets or sets the data label.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.C1FlexChart.PlotRect">
      <summary>
            Returns plot area rectangle (rectangle inside chart axes).
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.C1FlexChart.SeriesVisibilityChanged">
      <summary>
            Fires when chart series visibility was changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexChart.SaveImage(System.IO.Stream,C1.WPF.Chart.ImageFormat,System.Int32,System.Int32,System.Nullable{System.Windows.Media.Color})">
      <summary>
            Saves chart as image with to the specified stream.
            </summary>
      <param name="stream">Stream</param>
      <param name="fmt">Image format.</param>
      <param name="w">Width of image.</param>
      <param name="h">Height of image</param>
      <param name="backColor">The background of image.</param>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexChart.HitTest(System.Windows.Point)">
      <summary>
            Gets a HitTestInfo object with information about the specified point.
            </summary>
      <param name="pt">Point in control coordinates.</param>
      <returns>A HitTestInfo object with information about the point.</returns>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexChart.PointToData(System.Windows.Point)">
      <summary>
            Converts a Point from control coordinates to chart data coordinates.
            </summary>
      <param name="pt">Point in control coordinates.</param>
      <returns>The point in chart data coordinates.</returns>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexChart.DataToPoint(System.Windows.Point)">
      <summary>
            Converts a Point from data coordinates to control coordinates.
            </summary>
      <param name="pt">Point in data coordinates.</param>
      <returns>Point in control coordinates.</returns>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexChart.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Invoked during mouse down event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Chart.C1FlexChart.Invalidate">
      <summary>
            Invalidates the chart.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.C1FlexChart.LabelRendering">
      <summary>
            Fires before rendering label.
            </summary>
    </member>
    <member name="E:C1.WPF.Chart.C1FlexChart.LabelRendered">
      <summary>
            Fires after rendering label.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.RenderMode">
      <summary>
            Enumerates available render modes.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.RenderMode.Default">
      <summary>
            Xaml.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.RenderMode.Direct2D">
      <summary>
            Direct2D render mode.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.ImageFormat">
      <summary>
            Represents the format used to encode an image into a stream.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ImageFormat.Png">
      <summary>
            Png format.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ImageFormat.Jpeg">
      <summary>
            Jpeg format.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ImageFormat.Bmp">
      <summary>
            Bmp format.
            </summary>
    </member>
    <member name="F:C1.WPF.Chart.ImageFormat.Svg">
      <summary>
            Svg format.
            </summary>
    </member>
    <member name="T:C1.WPF.Chart.RenderDataLabelEventArgs">
      <summary>
            Arguments for RenderDataLabel event.
            </summary>
    </member>
    <member name="P:C1.WPF.Chart.RenderDataLabelEventArgs.Text">
      <summary>
            Data label text. It can be changed in event handler.
            </summary>
    </member>
  </members>
</doc>